{"id":71577,"link":"https://chinadigitaltimes.net/chinese/2010/05/从http-get和post的区别说起/","date":"2010-05-11T17:55:37Z","modified":"2010-05-11T17:55:37Z","title":"从HTTP GET和POST的区别说起","content":"<p>在推特上<a href=\"http://twitter.com/yining/status/12993863581\">抱怨面试时问HTTP GETE和POST的区别得到回答都不满意</a>，有人不清楚，当时只回复了看 RFC2616。趁有空说说</p>\n<p>面试时得到的回答大多是：POST是安全的，因为被提交的数据看不到，或者被加密的，其它的还有GET的时候中文出现乱码（在地址栏里），数据最大长度限制等等。</p>\n<p>说 POST 比 GET 安全肯定是错的，POST跟GET都是明文传输，用<a href=\"http://code.google.com/p/httpfox/\">httpfox</a>等插件，或者像<a href=\"http://www.wireshark.org/\">WireShark </a>等类似工具就能观察到。</p>\n<p>POST和GET的差别其实是很大的。语义上，GET是获取指定URL上的资源，是读操作，重要的一点是不论对某个资源GET多少次，它的状态是不会改变的，在这个意义上，我们说GET是安全的（不是被密码学或者数据保护意义上的安全）。因为GET是安全的，所以GET返回的内容可以被浏览器，Cache服务器缓存起来（其中还有很多细节，但不影响这里的讨论）。</p>\n<p>而POST的语意是对指定资源“追加/添加”数据，所以是不安全的，每次提交的POST，参与的代码都会认为这个操作会修改操作对象资源的状态，于是，浏览器在你按下F5的时候会跳出确认框，缓存服务器不会缓存POST请求返回内容。</p>\n<p>很遗憾到目前为止没有应聘者能够提到这一点。我猜测这背后的原因大概有两个，一是也许大多数人往往（我也一样）满足于只要完成任务就好，不管用哪个，表单提交了，数据处理了，内容显示或者重新定向到另外一个页面，就算完成了一个任务，从任务表里划掉，结束。而且对大部分项目(OA, CRM, MIS)的大部分情况下，用哪个似乎都可以。</p>\n<p>同时，在被商业机构在媒体和书籍上宣传兜售的WS-*概念和使用集成开发环境提供的“方便”的代码生成工具后，“了解”到所有Web服务调用都是通过POST，更潜意识里确定了POST和GET是一样的，而且GET能做的，POST都能做，POST简直就是GET++嘛。自然，能用POST就用POST，不必在乎两者的差别了。</p>\n<p>这又让我想起最近学到的一个概念: Radius Of Comprehension，理解的半径:</p>\n<p>当学习概念A的时候，需要先了解概念B，而概念C又是理解B的前提。当B和C都是新的需要学习的概念时，可以说A的理解半径是2，如图:</p>\n<pre>\nA --&gt; B --&gt; C\n|--1--|--2--|\n</pre>\n<p>在学习Web开发时，接触到GET和POST时，“理解的半径”可能包涵:</p>\n<pre>\nPOST vs. GET\n     |---&gt; Conditional GET -&gt; ETag -&gt; Cache\n     |         `--&gt; Status Code\n     `---&gt; HTTP的方法 --&gt; URL\n</pre>\n<p>往往因为仅仅满足于完成手上被要求的任务，或者懒于问一个为什么，我们就把自己的理解半径设置成零，那么就学不到更深入的东西，也因此仅仅知道POST和GET不同，而不再会了解不同在哪里，什么是Conditional GET和缓存header等概念。</p>\n<p>从一个简单的面试问题谈到这，貌似小题大作了，写到哪算哪吧。 </p>\n","author":176,"categories":[9203],"tags":[5908,8339,9540]}