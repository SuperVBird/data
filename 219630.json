{"id":219630,"link":"https://chinadigitaltimes.net/chinese/2012/04/阮一峰-函数式编程初探/","date":"2012-04-07T03:27:27Z","modified":"2012-04-07T03:27:27Z","title":"阮一峰 | 函数式编程初探","content":"<p><p>诞生50多年之后，<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Functional_programming\">函数式编程</a>（functional programming）开始获得越来越多的关注。</p>\n<p>不仅最古老的函数式语言Lisp重获青春，而且新的函数式语言层出不穷，比如Erlang、clojure、Scala,、F#等等。目前最当红的Python、Ruby、Javascript，对函数式编程的支持都很强，就连老牌的面向对象的Java、面向过程的PHP，都忙不迭地加入对匿名函数的支持。越来越多的迹象表明，函数式编程已经不再是学术界的最爱，开始大踏步地在业界投入实用。</p>\n<p>也许继&#8221;面向对象编程&#8221;之后，&#8221;函数式编程&#8221;会成为下一个编程的主流范式（paradigm）。未来的程序员恐怕或多或少都必须懂一点。</p>\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012040601.png\" /></p>\n<p>但是，&#8221;函数式编程&#8221;看上去比较难，缺乏通俗的入门教程，各种介绍文章都充斥着数学符号和专用术语，让人读了如坠云雾。就连最基本的问题&#8221;什么是函数式编程&#8221;，网上都搜不到易懂的回答。</p>\n<p>下面是我的&#8221;函数式编程&#8221;学习笔记，分享出来，与大家一起探讨。内容不涉及数学（<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Lambda_calculus\">Lambda Calculus</a>我也不懂），也不涉及高级特性（比如<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Lazy_evaluation\">lazy evaluation</a>和<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Currying\">currying</a>），只求尽量简单通俗地整理和表达，我现在所理解的&#8221;函数式编程&#8221;以及它的意义。</p>\n<p>我主要参考了Slava Akhmechet的<em><a rel=\"nofollow\" href=\"http://www.defmacro.org/ramblings/fp.html\">&#8220;Functional Programming For The Rest of Us&#8221;</a></em>。</p>\n<p><strong>一、定义</strong></p>\n<p>简单说，&#8221;函数式编程&#8221;是一种<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Programming_paradigm\">&#8220;编程范式&#8221;</a>（programming paradigm），也就是如何编写程序的方法论。</p>\n<p>它属于<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Structured_programming\">&#8220;结构化编程&#8221;</a>的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：</p>\n<blockquote>\n<p>　　(1 + 2) * 3 &#8211; 4</p>\n</blockquote>\n<p>传统的过程式编程，可能这样写：</p>\n<blockquote>\n<p>　　var a = 1 + 2;</p>\n<p>　　var b = a * 3;</p>\n<p>　　var c = b &#8211; 4;</p>\n</blockquote>\n<p>函数式编程要求使用函数，我们可以把运算过程<a rel=\"nofollow\" href=\"http://lostechies.com/derickbailey/2012/01/24/some-thoughts-on-functional-javascript/\">定义</a>为不同的函数，然后写成下面这样：</p>\n<blockquote>\n<p>　　var result = subtract(multiply(add(1,2), 3), 4);</p>\n</blockquote>\n<p>这就是函数式编程。</p>\n<p><strong>二、特点</strong></p>\n<p>函数式编程具有五个鲜明的特点。</p>\n<p><strong>1. 函数是&#8221;第一等公民&#8221;</strong></p>\n<p>所谓<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/First-class_function\">&#8220;第一等公民&#8221;</a>（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p>\n<p>举例来说，下面代码中的print变量就是一个函数，可以作为另一个函数的参数。</p>\n<blockquote>\n<p>　　var print = function(i) console.log(i);;</p>\n<p>　　[1,2,3].forEach(print);</p>\n</blockquote>\n<p><strong>2. 只用&#8221;表达式&#8221;，不用&#8221;语句&#8221;</strong></p>\n<p>&#8220;表达式&#8221;（expression）是一个单纯的运算过程，总是有返回值；&#8221;语句&#8221;（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p>\n<p>原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I/O）。&#8221;语句&#8221;属于对系统的读写操作，所以就被排斥在外。</p>\n<p>当然，实际应用中，不做I/O是不可能的。因此，编程过程中，函数式编程只要求把I/O限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</p>\n<p><strong>3. 没有&#8221;副作用&#8221;</strong></p>\n<p>所谓<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Side_effect_(computer_science)\">&#8220;副作用&#8221;</a>（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p>\n<p>函数式编程强调没有&#8221;副作用&#8221;，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n<p><strong>4. 不修改状态</strong></p>\n<p>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p>\n<p>在其他类型的语言中，变量往往用来保存&#8221;状态&#8221;（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。下面的代码是一个将字符串逆序排列的函数，它演示了不同的参数如何决定了运算所处的&#8221;状态&#8221;。</p>\n<blockquote>\n<p>　　function reverse(string) </p>\n<p>　　　　if(string.length == 0) </p>\n<p>　　　　　　return string;</p>\n<p>　　　　 else </p>\n<p>　　　　　　return reverse(string.substring(1, string.length)) + string.substring(0, 1);</p>\n<p>　　　　</p>\n<p>　　}</p>\n</blockquote>\n<p>由于使用了递归，函数式语言的运行速度比较慢，这是它长期不能在业界推广的主要原因。</p>\n<p><strong>5. 引用透明</strong></p>\n<p>引用透明（Referential transparency），指的是函数的运行不依赖于外部变量或&#8221;状态&#8221;，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p>\n<p>有了前面的第三点和第四点，这点是很显然的。其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫&#8221;引用不透明&#8221;，很不利于观察和理解程序的行为。</p>\n<p><strong>三、意义</strong></p>\n<p>函数式编程到底有什么好处，为什么会变得越来越流行？</p>\n<p><strong>1. 代码简洁，开发快速</strong></p>\n<p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p>\n<p>Paul Graham在<a rel=\"nofollow\" href=\"http://www.ruanyifeng.com/docs/pg/\">《黑客与画家》</a>一书中<a rel=\"nofollow\" href=\"http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html\">写道</a>：同样功能的程序，极端情况下，Lisp代码的长度可能是C代码的二十分之一。</p>\n<p>如果程序员每天所写的代码行数度基本相同，这就意味着，&#8221;C语言需要一年时间完成开发某个功能，Lisp语言只需要不到三星期。反过来说，如果某个新功能，Lisp语言完成开发需要三个月，C语言需要写五年。&#8221;当然，这样的对比故意夸大了差异，但是&#8221;在一个高度竞争的市场中，即使开发速度只相差两三倍，也足以使得你永远处在落后的位置。&#8221;</p>\n<p><strong>2. 接近自然语言，易于理解</strong></p>\n<p>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p>\n<p>前文曾经将表达式(1 + 2) * 3 &#8211; 4，写成函数式语言：</p>\n<blockquote>\n<p>　　subtract(multiply(add(1,2), 3), 4)</p>\n</blockquote>\n<p>对它进行变形，不难得到另一种写法：</p>\n<blockquote>\n<p>　　add(1,2).multiply(3).subtract(4)</p>\n</blockquote>\n<p>这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：</p>\n<blockquote>\n<p>　　merge([1,2],[3,4]).sort().search(&#8220;2&#8221;)</p>\n</blockquote>\n<p>因此，函数式编程的代码更容易理解。</p>\n<p><strong>3. 更方便的代码管理</strong></p>\n<p>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p>\n<p><strong>4. 易于&#8221;并发编程&#8221;</strong></p>\n<p>函数式编程不需要考虑&#8221;死锁&#8221;（deadlock），因为它不修改变量，所以根本不存在&#8221;锁&#8221;线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署&#8221;并发编程&#8221;（concurrency）。</p>\n<p>请看下面的代码：</p>\n<blockquote>\n<p>　　var s1 = Op1();</p>\n<p>　　var s2 = Op2();</p>\n<p>　　var s3 = concat(s1, s2);</p>\n</blockquote>\n<p>由于s1和s2互不干扰，不会修改变量，谁先执行是无所谓的，所以可以放心地增加线程，把它们分配在两个线程上完成。其他类型的语言就做不到这一点，因为s1可能会修改系统状态，而s2可能会用到这些状态，所以必须保证s2在s1之后运行，自然也就不能部署到其他线程上了。</p>\n<p>多核CPU是将来的潮流，所以函数式编程的这个特性非常重要。</p>\n<p><strong>5. 代码的热升级</strong></p>\n<p>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Erlang_(programming_language)\">Erlang</a>语言早就证明了这一点，它是瑞典爱立信公司为了管理电话系统而开发的，电话系统的升级当然是不能停机的。</p>\n<p>（完）</p>\n<div>\n<h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a rel=\"nofollow\" href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a rel=\"nofollow\" href=\"http://www.ruanyifeng.com/blog/2012/04/functional_programming.html\">http://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></li>\n<li>最后修改时间：2012年4月 6日 15:54</li>\n<li>付费支持：<a rel=\"nofollow\" href=\"https://mai.alipay.com/p.htm?id=2012033102826278\"><img alt=\"支付宝担保交易\" src=\"http://chinadigitaltimes.net/chinese/files/2012/04/3a976ef2rmb_32.png.png\" /></a> | <a rel=\"nofollow\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&#038;business=yifeng.ruan@gmail.com&#038;currency_code=USD&#038;amount=2.99&#038;return=http://www.ruanyifeng.com/thank.html&#038;item_name=Ruan%20YiFeng's%20Blog&#038;undefined_quantity=1&#038;no_note=0\"><img alt=\"paypal\" src=\"http://chinadigitaltimes.net/chinese/files/2012/04/5ca83e43dollar_32.png.png\" /></a> </li>\n</ul>\n</div>\n<div>\n<p><a rel=\"nofollow\" href=\"http://yipinzao.com/\"><img src=\"http://www.ruanyifeng.com/blog/images/ad_yipinzao.jpg\" /></a></p>\n</div>\n<p><img src=\"http://chinadigitaltimes.net/chinese/files/2012/04/7fbc69d2g2012040601.png-150x150.png\" /></p>\n<p><small>本文由自动聚合程序取自网络，内容和观点不代表数字时代立场</small></p>\n<p><iframe src=\"https://docs.google.com/spreadsheet/embeddedform?formkey=dGRpN3FrVThuMFFsZHBZcmNGLW94dEE6MQ\" width=\"450\" height=\"309\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading&#8230;</iframe></p>\n<form method=\"POST\" action=\"http://www.feedblitz.com/f/f.fbz?AddNewUserDirect\">\n定期获得翻墙信息？<a href=\"http://www.feedblitz.com/f/?Sub=738338\">请电邮订阅数字时代</a> <br /><input name=\"EMAIL\" maxlength=\"64\" type=\"text\" size=\"25\" value=\"\"><br />\n<input name=\"FEEDID\" type=\"hidden\" value=\"738338\"><br />\n<input name=\"PUBLISHER\" type=\"hidden\" value=\"7485568\"><br />\n<input type=\"submit\" value=\"订阅!\"><br />\n</form>\n","author":1004,"categories":[9203],"tags":[9400]}