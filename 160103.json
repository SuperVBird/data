{"id":160103,"link":"https://chinadigitaltimes.net/chinese/2011/06/阮一峰-如何判断javascript对象是否存在/","date":"2011-06-11T09:00:37Z","modified":"2011-06-11T09:00:37Z","title":"阮一峰 | 如何判断Javascript对象是否存在","content":"<p><p>Javascript语言的设计不够严谨，很多地方一不小心就会出错。</p>\n<p>举例来说，请考虑以下情况。</p>\n<p>现在，我们要判断一个<strong>全局对象</strong>myObj是否存在，如果不存在，就对它进行声明。用自然语言描述的算法如下：</p>\n<blockquote>\n<p> if (myObj不存在)</p>\n<p> 声明myObj;</p>\n</p>\n</blockquote>\n<p>你可能会觉得，写出这段代码很容易。但是实际上，它涉及的语法问题，远比我们想象的复杂。<a rel=\"nofollow\" href=\"http://perfectionkills.com/unnecessarily-comprehensive-look-into-a-rather-insignificant-issue-of-global-objects-creation/\">Juriy Zaytsev</a>指出，判断一个Javascript对象是否存在，有超过50种写法。只有对Javascript语言的实现细节非常清楚，才可能分得清它们的区别。</p>\n<p><strong>第一种写法</strong></p>\n<p>根据直觉，你可能觉得可以这样写：</p>\n<blockquote>\n<p> if (!myObj) </p>\n<p> myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>但是，运行这段代码，浏览器会直接抛出ReferenceError错误，导致运行中断。请问错在哪里？</p>\n<p>对了，if语句判断myObj是否为空时，这个变量还不存在，所以才会报错。改成下面这样，就能正确运行了。</p>\n<blockquote>\n<p> if (!myObj) </p>\n<p> <strong>var myObj =  ;</strong></p>\n<p> }</p>\n</blockquote>\n<p>为什么加了一个var以后，就不报错了？难道这种情况下，if语句做判断时，myObj就已经存在了吗？</p>\n<p>要回答这个问题，就必须知道Javascript解释器的工作方式。Javascript语言是&#8221;先解析，后运行&#8221;，解析时就已经完成了变量声明，所以上面的代码实际等同于：</p>\n<blockquote>\n<p> <strong>var myObj;</strong></p>\n<p> if (!myObj) </p>\n<p> var myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>因此，if语句做判断时，myObj确实已经存在了，所以就不报错了。这就是var命令的&#8221;代码提升&#8221;（hoisting）作用。Javascript解释器，只&#8221;提升&#8221;var命令定义的变量，对不使用var命令、直接赋值的变量不起作用，这就是为什么不加var会报错的原因。</p>\n<p><strong>第二种写法</strong></p>\n<p>除了var命令，还可以有另一种改写，也能得到正确的结果：</p>\n<blockquote>\n<p> <strong>if (!window.myObj) </strong></p>\n<p> myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>window是javascript的顶层对象，所有的全局变量都是它的属性。所以，判断myobj是否为空，等同于判断window对象是否有myobj属性，这样就可以避免因为myObj没有定义而出现ReferenceError错误。不过，从代码的规范性考虑，最好还是对第二行加上var：</p>\n<blockquote>\n<p> if (!window.myObj) </p>\n<p> <strong>var myObj =  ;</strong></p>\n<p> }</p>\n</blockquote>\n<p>或者写成这样：</p>\n<blockquote>\n<p> if (!window.myObj) </p>\n<p> <strong>window.myObj =  ;</strong></p>\n<p> }</p>\n</blockquote>\n<p><strong>第三种写法</strong></p>\n<p>上面这种写法的缺点在于，在某些运行环境中（比如V8、Rhino），window未必是顶层对象。所以，考虑改写成：</p>\n<blockquote>\n<p> if (!<strong>this.myObj</strong>) </p>\n<p> <strong>this.myObj</strong> =  ;</p>\n<p> }</p>\n</blockquote>\n<p>在全局变量的层面中，this关键字总是指向顶层变量，所以就可以独立于不同的运行环境。</p>\n<p><strong>第四种写法</strong></p>\n<p>但是，上面这样写可读性较差，而且this的指向是可变的，容易出错，所以进一步改写：</p>\n<blockquote>\n<p> <strong>var global = this;</strong></p>\n<p> if (!global.myObj) </p>\n<p> global.myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>用自定义变量global表示顶层对象，就清楚多了。</p>\n<p><strong>第五种写法</strong></p>\n<p>还可以使用typeof运算符，判断myObj是否有定义。</p>\n<blockquote>\n<p> if (<strong>typeof myObj == &#8220;undefined&#8221;</strong>) </p>\n<p> var myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>这是目前使用最广泛的判断javascript对象是否存在的方法。</p>\n<p><strong>第六种写法</strong></p>\n<p>由于在已定义、但未赋值的情况下，myObj的值直接等于undefined，所以上面的写法可以简化：</p>\n<blockquote>\n<p> if (<strong>myObj == undefined</strong>) </p>\n<p> var myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>这里有两个地方需要注意，首先第二行的var关键字不能少，否则会出现ReferenceError错误，其次undefined不能加单引号或双引号，因为这里比较的是undefined这种数据类型，而不是&#8221;undefined&#8221;这个字符串。</p>\n<p><strong>第七种写法</strong></p>\n<p>上面的写法在&#8221;精确比较&#8221;（===）的情况下，依然成立：</p>\n<blockquote>\n<p> if (<strong>myObj === undefined</strong>) </p>\n<p> var myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p><strong>第八种写法</strong></p>\n<p>根据javascript的语言设计，undefined == null，所以比较myObj是否等于null，也能得到正确结果：</p>\n<blockquote>\n<p> if (<strong>myObj == null</strong>) </p>\n<p> var myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p>不过，虽然运行结果正确，但是从语义上看，这种判断方法是错的，应该避免。因为null指的是已经赋值为null的空对象，即这个对象实际上是有值的，而undefined指的是不存在或没有赋值的对象。因此，这里只能使用&#8221;比较运算符&#8221;（==），如果这里使用&#8221;精确比较运算符&#8221;（===），就会出错。</p>\n<p><strong>第九种写法</strong></p>\n<p>还可以使用in运算符，判断myObj是否为顶层对象的一个属性：</p>\n<blockquote>\n<p> <strong>if (!(&#8216;myObj&#8217; in window)) </strong></p>\n<p> window.myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p><strong>第十种写法</strong></p>\n<p>最后，使用hasOwnProperty方法，判断myObj是否为顶层对象的一个属性：</p>\n<blockquote>\n<p> <strong>if (!this.hasOwnProperty(&#8216;myObj&#8217;)) </strong></p>\n<p> this.myObj =  ;</p>\n<p> }</p>\n</blockquote>\n<p><strong>总结</strong></p>\n<p>1. 如果只判断对象是否存在，推荐使用第五种写法。</p>\n<p>2. 如果除了对象是否存在，还要判断对象是否有null值，推荐使用第一种写法。</p>\n<p>3. 除非特殊情况，所有变量都应该使用var命令声明。</p>\n<p>4. 为了跨平台，建议避免使用window表示顶层对象。</p>\n<p>5. 在Javascript语言中，null和undefined容易产生混淆。在可能同时涉及两者的情况下，建议使用&#8221;精确比较&#8221;运算符（===）。</p>\n<p>（完）\n</p>\n<p><a rel=\"nofollow\" href=\"http://feedads.g.doubleclick.net/~a/8ez6d7Pc88PfmHzappXNXpmW0Z0/0/da\"><img border=\"0\" ismap src=\"http://feedads.g.doubleclick.net/~a/8ez6d7Pc88PfmHzappXNXpmW0Z0/0/di\"></a><br />\n<a rel=\"nofollow\" href=\"http://feedads.g.doubleclick.net/~a/8ez6d7Pc88PfmHzappXNXpmW0Z0/1/da\"><img border=\"0\" ismap src=\"http://feedads.g.doubleclick.net/~a/8ez6d7Pc88PfmHzappXNXpmW0Z0/1/di\"></a></p>\n</p>\n<p><small>本文由自动聚合程序取自网络，内容和观点不代表数字时代立场</small></p>\n<form method=\"POST\" action=\"http://www.feedblitz.com/f/f.fbz?AddNewUserDirect\">\n定期获得翻墙信息？<a href=\"http://www.feedblitz.com/f/?Sub=750556\">请电邮订阅数字时代</a> <br /><input name=\"EMAIL\" maxlength=\"64\" type=\"text\" size=\"25\" value=\"\"><br />\n<input name=\"FEEDID\" type=\"hidden\" value=\"750556\"><br />\n<input name=\"PUBLISHER\" type=\"hidden\" value=\"7485568\"><br />\n<input type=\"submit\" value=\"订阅!\"><br />\n</form>\n","author":722,"categories":[9203],"tags":[9400]}