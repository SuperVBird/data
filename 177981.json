{"id":177981,"link":"https://chinadigitaltimes.net/chinese/2011/09/编程随想-用图片隐藏信息的技术实现/","date":"2011-09-08T07:31:19Z","modified":"2011-09-27T17:19:18Z","title":"编程随想 | 用图片隐藏信息的技术实现","content":"<p>　　上一个帖子，介绍了“<a rel=\"nofollow\" href=\"http://program-think.blogspot.com/2011/05/use-image-hide-gfw-tool.html\">用图片传播翻墙工具</a>”。今天，来聊一下其中的技术原理。如果你对IT技术没啥兴趣，可以略过本文。</p>\n<h2>★图片隐藏信息的用途</h2>\n<p>　　先来说说信息隐藏的目的。俺大致总结了一下，信息隐藏可以用于如下几种场合。</p>\n<h3>◇规避敏感词过滤</h3>\n<p>　　所谓的&#8221;敏感词过滤&#8221;，常翻墙的同学，应该都很熟悉了。用图片来隐藏信息，可以规避GFW的敏感词过滤。</p>\n<h3>◇规避肉眼审查</h3>\n<p>　　俺在<a rel=\"nofollow\" href=\"http://program-think.blogspot.com/2011/05/use-image-hide-gfw-tool.html\">上一个帖子</a>介绍的方法（把翻墙工具嵌入图片中），主要是为了躲开网站管理人员的人工审查。国内的很多网站，对于上传的图片，都会进行人工审查。如果能通过技术手段把信息隐藏在图片中，而图片本身又看不出什么异样，人工审核就看不出来。</p>\n<h3>◇传递加密信息</h3>\n<p>　　最后，图片还可以用来隐藏加密的信息。关于加密的用途及重要性，俺在“<a rel=\"nofollow\" href=\"http://program-think.blogspot.com/2011/05/file-encryption-overview.html\">文件加密的扫盲介绍</a>”中，已经强调过加密性。用图片来隐藏加密信息，除了具有加密的效果，还具有很大的欺骗性——因为外人难以知道一张图片是否包含有加密信息。</p>\n<h2>★准备工作——先压缩</h2>\n<p>　　下面，俺会介绍几种不同的隐藏方式。在动手之前，先说一下准备工作——把要隐藏得文件先用压缩工具（比如 7zip 或 WinRAR）压缩一下。<br />　　压缩有如下几个好处：<br />优点1<br />如果你要隐藏的文件是文本格式或者 Office 格式，它内部的内容是明码的。如果里面包含敏感词，在通过网络传输时，会遭遇敏感词过滤。而压缩后的文件，原有的内容已经变得面目全非，可以规律敏感词过滤。<br />优点2<br />压缩之后，体积变小，有利于增加隐蔽性。因此，应尽量使用&#8221;最大压缩&#8221;的选项。<br />优点3<br />对于后面介绍的2种方法（尾部追加法、内容覆盖法），如果你隐藏的文件是压缩格式的，到时候提取信息会很简便——直接用压缩工具来解压，即可。</p>\n<h2>★尾部追加法</h2>\n<p>　　先介绍最简单的一种方法。</p>\n<h3>◇技术原理</h3>\n<p>　　顾名思义，&#8221;尾部追加法&#8221;就是把要隐藏的文件追加到图片尾部。这种方法不会破坏图片原有的任何数据，因此，图片看起来和原来一模一样。</p>\n<h3>◇隐藏信息的步骤</h3>\n<p>　　隐藏的过程很简单，用 Windows 内置的文件拷贝命令，即可完成。假设你的图片文件叫 A.JPG，需要隐藏的压缩文件叫 B.ZIP，那你只需要执行如下命令，就可以把两个文件合并成一个新文件。<br /><b>copy /b A.JPG + B.zip C.JPG</b><br />　　执行完如上命令，即可得到一个新的图片文件 C.JPG。这个图片文件的大小是前两者的总和。你可以用各种看图工具来打开 C.JPG，不会看到什么异常。</p>\n<h3>◇提取信息的步骤</h3>\n<p>　　由于你追加的是压缩文件，提取的时候就简单了——只要用压缩工具打开 C.JPG，就可以直接看到压缩包里面的内容了。</p>\n<h3>◇优点</h3>\n<p>1、<br />制作简单，一条 copy 命令就可以搞定；如果隐藏的是压缩文件，提取的过程也很简单。<br />2、<br />用看图工具看生成的新文件，还是跟原来一样。<br />3、<br />隐藏的文件，大小不受限制。比如，你可以在一张100K的图片尾部，追加200K的隐藏数据。</p>\n<h3>◇缺点</h3>\n<p>1、<br />由于隐藏的文件附加在尾部。当你把这个新的图片文件上传到某些贴图的网站，（假如这个网站对图片格式的校验比较严格）它有可能会发现图片尾部有多余的数据，并且会把这个多余的数据丢弃掉。<br />2、<br />追加后，图片的文件尺寸变大了。如果你追加的文件太大，容易被发现破绽。<br />比方说，一张640*480的 JPEG 图片，大小竟然有好几兆，对于有经验的IT技术人员，一下子就会觉得有猫腻。</p>\n<h2>★内容覆盖法</h2>\n<p>　　说完尾部追加的办法，再来介绍内容覆盖的办法。</p>\n<h3>◇技术原理</h3>\n<p>　　通常，图片文件都有包含2部分：文件头和数据区。而&#8221;内容覆盖法&#8221;，就是把要隐藏的文件，直接<b>覆盖</b>到图片文件的<b>数据区</b>的<b>尾部</b>。比方说，某图片有100K，其中文件头占1K，那么，数据区就是99K。也就是说，最多只能隐藏99K的文件。<br />　　切记：<b>覆盖的时候，千万不可破坏文件头</b>。文件头一旦破坏，这个图片文件就不再是一个合法的图片文件了。<br />　　使用这种方法，对图片文件的格式，是有讲究的——最好用<b> 24位色的 BMP 格式</b>。一来，BMP 格式本身比较简单，数据区随便覆盖，问题不大；二来，24位色的 BMP 相对其它的格式 BMP，文件尺寸更大，可以隐藏更多内容。</p>\n<h3>◇隐藏信息的步骤</h3>\n<p>　　用这个招数来隐藏信息，稍微有点麻烦，需要借助一些小工具。对于这种简单的活计，俺通常用Python脚本来搞定。以下是俺写的一个简单 Python 脚本。你的电脑中如果有Python环境，可以直接拿这个脚本去用。<br />　　事先声明：如下代码没有严格计算 BMP 的文件头尺寸，俺只是大致预留了 1024 字节，感觉应该够了。<br />&#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; </p>\n<pre>import sys<br><br>def embed(container_file, data_file, output_file) :<br>    container = open(container_file, \"rb\").read()<br>    data = open(data_file, \"rb\").read()<br><br>    if len(data)+1024 >= len(container) :<br>        print \"Not enough space to save\", data_file<br>    else :<br>        f = open(output_file, \"wb\")<br>        f.write(container[ : len(container)-len(data)])<br>        f.write(data)<br>        f.close()<br><br>if \"__main__\" == __name__ :<br>    try :<br>        if len(sys.argv) == 4 :<br>            embed(sys.argv[1], sys.argv[2], sys.argv[3])<br>        else :<br>            print \"Usage:\"<br>            print sys.argv[0], \"container data output\"<br>    except Exception,err :<br>        print err</pre>\n<p>&#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; &#8211; <br />　　上述Python的代码，很好懂，有编程基础的同学，10分钟之内就可以用自己熟悉的语言重写一个类似的。<br />　　另外，没学过 Python 的同学，如果有兴趣，可以看看俺之前写的系列帖子——<a rel=\"nofollow\" href=\"http://program-think.blogspot.com/2009/08/why-choose-python-0-overview.html\">为什么俺推荐Python？</a></p>\n<h3>◇提取信息的步骤</h3>\n<p>　　和前一种方法类似。如果你覆盖的是压缩文件，提取的时候，可以用压缩工具打开图片，就可以直接看到压缩包里面的内容了。</p>\n<h3>◇优点</h3>\n<p>1、<br />图片的文件尺寸没变。<br />2、<br />虽然隐藏文件覆盖到数据区，破环了原图像的内容。但是从格式上来讲，该图片文件的格式还是合法的。<br />因此，你可以把这种图片上传到各种贴图的网站，技术上不会出问题。<br />3、<br />如果隐藏的是压缩文件，提取的过程很简单。</p>\n<h3>◇缺点</h3>\n<p>1、<br />由于隐藏的文件覆盖了数据区，因此，图片在显示的时候，会有一块区域变成灰蒙蒙的。<br />2、<br />隐藏文件的大小，有一定的限制——不能大于图片数据区的尺寸。<br />3、<br />对图片格式有一定要求。此处再啰嗦一下，建议用 24位色的 BMP 格式。</p>\n<h2>★隐写法</h2>\n<p>　　最后，来介绍一种最复杂，但是也最隐蔽的方法——隐写术。</p>\n<h3>◇技术原理</h3>\n<p>　　此方法会涉及较深奥的技术领域，俺也就知道个大概。通俗地说：如果把图片的某个像素的颜色，进行微小的调整，肉眼是看不出来的；因此，专门的软件，利用某些高深的算法，就可以在变化的像素中隐藏信息。<br />　　有兴趣的同学，可以看&#8221;<a rel=\"nofollow\" href=\"http://zh.wikipedia.org/wiki/%E9%9A%90%E5%86%99%E6%9C%AF\">这里</a>&#8220;的介绍；懂洋文的，还可以看更详细的介绍，在&#8221;<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Steganography\">这里</a>&#8220;。</p>\n<h3>◇隐藏／提取信息的步骤</h3>\n<p>　　使用这种方法，你需要用专门的工具来进行信息的隐藏和提取。在进行隐藏时，你除了指定图片文件和被隐藏的文件，还需要设置一个密码。隐写工具会把你的隐藏文件先加密，然后再进行隐写；提取的时候，需要用同一款隐写工具进行提取，并输入同样的密码，才能提取出来。<br />　　假如图片文件落入攻击者手中，他必须同时知道2个信息（你用哪款隐写工具，你隐写时设置的密码），才有可能破解出隐含的信息。因此，安全性很高。</p>\n<h3>◇相关工具</h3>\n<p>　　下面介绍几款工具，大伙儿可以根据自己喜好，挑选一个试试看。</p>\n<p><center></p>\n<table border=\"1\" cellspacing=\"0\">\n<tr>\n<th>名称</th>\n<th>官网</th>\n<th>界面</th>\n<th>类型</th>\n</tr>\n<tr>\n<td>Silent Eye</td>\n<td><a rel=\"nofollow\" href=\"http://www.silenteye.org/\">这里</a></td>\n<td>图形界面</td>\n<td>开源软件</td>\n</tr>\n<tr>\n<td>Steg Hide</td>\n<td><a rel=\"nofollow\" href=\"http://steghide.sourceforge.net/\">这里</a></td>\n<td>命令行界面</td>\n<td>开源软件</td>\n</tr>\n<tr>\n<td>Ultima Steganography</td>\n<td><a rel=\"nofollow\" href=\"http://enplase.com/pages/Ultima+Steganography+description.html\">这里</a></td>\n<td>图形界面</td>\n<td>商业软件</td>\n</tr>\n</table>\n<p></center></p>\n<h3>◇优点</h3>\n<p>1、<br />隐蔽性非常好。图片看上去几乎没变（其实是有极其轻微的变化，但是肉眼看不出）。并且，图片文件的大小也没变化。<br />即使是专业人士，也很难判断一张图片是否包含了隐写术的数据。</p>\n<h3>◇缺点</h3>\n<p>1、<br />隐藏信息和提取信息比较麻烦，需要使用专门的工具。<br />2、<br />只能隐藏较少的信息。<br />此方法能隐藏的信息量，和图片面积有关，和图片格式无关。比如一张1600*1200尺寸的，无论哪种格式，大约只能隐藏<b>几KB</b>的数据。</p>\n<h2>★结尾</h2>\n<p>　　刚才介绍的几个招数，除了可以用于图片文件，也可以用在其它的多媒体文件中（比如：音频文件、视频文件）。有兴趣的网友，可以自个儿研究一下。</p>\n<div>================================</p>\n<h4>版权声明</h4>\n<p>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&#8221;编程随想&#8221;和本文原始地址。</p>\n<h4>学习翻墙</h4>\n<p>发任意邮件到<b>help_gfw@yahoo.com</b>即可自动获取翻墙扫盲教程;别用国内邮箱,易被墙。如有其它问题要联系俺,请写信到<b>program.think@gmail.com</b><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5235590154125226279-239978863757006777?l=program-think.blogspot.com\" alt=\"\" /></div>\n<div>\n<a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=B0ClaplfMXo:z8dSMKG0--M:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=yIl2AUoC8zA\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=B0ClaplfMXo:z8dSMKG0--M:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=qj6IDK7rITs\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=B0ClaplfMXo:z8dSMKG0--M:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=7Q72WNTAKBA\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=B0ClaplfMXo:z8dSMKG0--M:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/programthink?i=B0ClaplfMXo:z8dSMKG0--M:V_sGLiPBpWU\" border=\"0\" /></a>\n</div>\n<p><img src=\"http://feeds.feedburner.com/~r/programthink/~4/B0ClaplfMXo\" height=\"1\" width=\"1\" /></p>\n<p><small>本文由自动聚合程序取自网络，内容和观点不代表数字时代立场</small></p>\n<form method=\"POST\" action=\"http://www.feedblitz.com/f/f.fbz?AddNewUserDirect\">\n定期获得翻墙信息？<a href=\"http://www.feedblitz.com/f/?Sub=738338\">请电邮订阅数字时代</a> <br /><input name=\"EMAIL\" maxlength=\"64\" type=\"text\" size=\"25\" value=\"\"><br />\n<input name=\"FEEDID\" type=\"hidden\" value=\"738338\"><br />\n<input name=\"PUBLISHER\" type=\"hidden\" value=\"7485568\"><br />\n<input type=\"submit\" value=\"订阅!\"><br />\n</form>\n","author":991,"categories":[9203],"tags":[9400,9283]}