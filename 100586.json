{"id":100586,"link":"https://chinadigitaltimes.net/chinese/2010/08/微博feed系统的推push模式和拉pull模式和时间分区拉模式/","date":"2010-08-25T15:50:36Z","modified":"2010-08-25T15:50:36Z","title":"微博feed系统的推(push)模式和拉(pull)模式和时间分区拉模式架构探讨","content":"<p><p>来自: <a href=\"http://www.feedzshare.com/b/2710265/2\">博客园-草屋主人的blog &#8211; FeedzShare</a>  <br />\n<br />发布时间:2010年08月24日,  已有 5 人推荐 </p>\n<hr>\n<div>\n<p>作者: <a href=\"http://www.cnblogs.com/sunli/\">草屋主人</a> 发表于 2010-08-24 22:50 <a href=\"http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html\">原文链接</a> 阅读: 891 评论: 6</p>\n<p><span>微博feed系统的推(push)模式和拉(pull)模式和<span>时间分区拉模式</span>架构探讨</span></p>\n<p>     [文章作者：孙立 链接：<a href=\"http://www.cnblogs.com/sunli/\">http://www.cnblogs.com/sunli/</a> 更新时间：2010-08-24]</p>\n<p>     sns系统，微博系统都应用到了feed（每条微博或者sns里的新鲜事等我们称作feed）系统，不管是<a href=\"http://twitter.com/\">twitter.com</a>或者国内的新浪微博，人人网等，在各种技术社区，技术大会上都在分享自己的feed架构，也就是推拉模式（<a href=\"http://timyang.net\">timyang</a>上次也分享了新浪微薄的模式）。下面我们就微博的feed推拉(push,pull)模式做一下探讨，并提出新的<span>时间分区拉模式</span>。</p>\n<p>      众所周知，在微博中，当你发表一篇微博，那么所有关注你的followers（粉丝）都会在一定的时间内收到你的微薄，这有点像群发一封邮件，所有的抄送者都会在一定的时间内收到。到这里，你可能觉得没有什么难度。我们看下下面的截图：</p>\n<p>     <img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082421423688.png\" /></p>\n<p>       图一：新浪微博姚晨<br /><img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082421425258.png\" /></p>\n<p>         图二：twitter上冯大辉</p>\n<p>     新浪微博的姚晨粉丝有2594751，她发表任何一篇微博，都需要2594751个粉丝在一定的时间内收到，twitter的冯大辉发表一篇的话，需要19868个followers收到。</p>\n<p>     相反，姚晨需要收到他关注的545个人的所有更新，冯大辉需要收到他关注的2525个人的所有更新。到这里，你是不是感觉到有那么一点点小挑战呢？</p>\n<p>     下面我们看下微博一般的整体结构图：</p>\n<p>      <img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082421491090.jpg\" /></p>\n<p>                 图三：微博整体结构</p>\n<p>       图中展示了微博的整体数据流程，先了解下整体的数据结构，没有涉及到followers等的推拉模式处理。下面我们再看下推模式（push）：</p>\n<p><img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082421514664.jpg\" /></p>\n<p>          图四：推模式结构</p>\n<p>   推模式需要把一篇微博推送给所有关注他的人（推给所有的粉丝），比如姚晨，我们就需要推送给2594751个用户的feeds表中。当然，feeds表可以很好的进行sharding,存储也都是一些数字型的字段，存储空间可能不是很大，用户在查询自己关注的所有人的feed时，速度快，性能非常高，但是推送量会非常大，姚晨发表一篇，就会产生200多万条数据。试想，一个大量用户的微薄系统通过使用推模式，是不是会产生非常惊人的数据呢？</p>\n<p>    下面看下拉模式（pull）</p>\n<p><img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082421574039.jpg\" /></p>\n<p>            图五：拉模式</p>\n<p>     拉模式只需要用户发表微博时，存储一条微博数据到feeds表中(feeds表可以是一个临时表，只保存近期可接受范围的数据).用户每次查询feed时都会去查询feeds表。比如姚晨打开自己的微薄首页，就产生：SELECT id FROM feeds where uid in(following uid list) ORDER BY id DESC LIMIT n(查询最新的n条)，缓存到memcached</p>\n<p>uidlist=>{data:id list,timeline:上次查询出来的最新的一条数据的时间}</p>\n<p>再次刷新：SELECT id FROM feeds where uid in(following uid list) AND timeline>(memcached存储的上次的timeline) ORDER BY id DESC LIMIT n</p>\n<p> </p>\n<p>    这种模式实现起来也是比较简单和容易的，只是在查询的时候需要多考虑下缓存的结构。但是feeds表会产生很大的压力，怎么说feeds表也要保存最近十天半个月的数据吧，对于一个大点的系统，这会产生比较大的数据，如果following的人数比较多，数据库的压力就会非常大。而且一般在线的用户，客户端都会定期扫描，又会增加很大的压力，这在查询性能上没有推模式的效率高。</p>\n<p>     下面我们在对拉模式做一下改进优化</p>\n<p>     <img src=\"http://pic002.cnblogs.com/img/sunli/201008/2010082422193466.gif\" /></p>\n<p>           图五：拉模式(pull)-改进（<span>时间分区拉模式</span>）</p>\n<p>           拉模式的改进主要是在feeds的存储上，使用按照时间进行分区存储。分为最近时间段（比如最近一个小时），近期的，比较长时期等等。我们再来看下查询的流程，比如姚晨登陆微博首页，假设缓存中没有任何数据，那么我们可以查询比较长时期的feeds表，然后进入缓存。下一次查询，通过查询缓存中的数据的timeline，如果timeline还在最近一个小时内，那么只需要查询最近一个小时的数据的feed表，最近一个小时的feeds表比图四的feeds表可要小很多，查询起来速度肯定快几个数量级了。</p>\n<p>          改进模式的重点在于feeds的时间分区存储，根据上次查询的timeline来决定查询应该落在那个表。一般情况下，经常在线的用户，频繁使用的客户端扫描操作，经常登录的用户，都会落在最近的feeds表区间，查询都是比较高效的。只有那些十天，半个月才登录一次的用户需要去查询比较长时间的feeds大表，一旦查询过了，就又会落在最近时间区域，所以效率也是非常高的。</p>\n<p>         关于时间的分区，需要根据数据量，用户访问特点进行一个合理的切分。如果数据发表量非常大，可以进行更多的分区。</p>\n<p>        上面介绍的<span>推模式和拉模式</span>都有各自的特点，个人觉得<span>时间分区拉模式</span>弥补了图四的拉模式的很大的不足，是一个成本比较低廉的解决方案。当然，时间分区拉模式也可以结合推模式，根据某些特点来增加系统的性能。</p>\n<p>        后记：本文的目的是介绍<span>时间分区拉模式，<span>本人对新浪微博和twitter等的推拉模式的细节并不清楚。</span></span></p>\n<p> </p>\n<p> </p>\n<p><img src=\"http://www.cnblogs.com/sunli/aggbug/1807682.html?type=1\" width=\"1\" height=\"1\" alt=\"\" /></p>\n<p>评论: 6　<a href=\"http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html#pagedcomment\">查看评论</a>　<a href=\"http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html#commentform\">发表评论</a></p>\n<p><a href=\"http://job.cnblogs.com/\">程序员找工作，就在博客园</a></p>\n<hr>\n<p>最新新闻：<br />· <a href=\"http://news.cnblogs.com/n/71949/\">Google：搜索狂欢已然结束</a><span>(2010-08-25 12:04)</span><br />· <a href=\"http://news.cnblogs.com/n/71948/\">微软曾将开源与Linux混为一谈</a><span>(2010-08-25 11:57)</span><br />· <a href=\"http://news.cnblogs.com/n/71947/\">中文版 AdSense 增加广告类别过滤器</a><span>(2010-08-25 11:46)</span><br />· <a href=\"http://news.cnblogs.com/n/71946/\">分析预计18个月内Facebook流量将超越谷歌</a><span>(2010-08-25 11:45)</span><br />· <a href=\"http://news.cnblogs.com/n/71944/\">九城CEO朱骏：公司仍在亏损 相信能走出低谷</a><span>(2010-08-25 11:39)</span></p>\n<p>编辑推荐：<a href=\"http://news.cnblogs.com/n/71889/\">证据就在代码里</a></p>\n<p>网站导航：<a href=\"http://www.cnblogs.com\">博客园首页</a>  <a href=\"http://home.cnblogs.com/\">个人主页</a>  <a href=\"http://news.cnblogs.com\">新闻</a>  <a href=\"http://home.cnblogs.com/ing/\">闪存</a>  <a href=\"http://home.cnblogs.com/group/\">小组</a>  <a href=\"http://space.cnblogs.com/q/\">博问</a>  <a href=\"http://space.cnblogs.com\">社区</a>  <a href=\"http://kb.cnblogs.com\">知识库</a></p>\n</div>\n<p><img src=\"http://img.tongji.linezing.com/1017243/tongji.gif\" /><img src=\"http://img.tongji.linezing.com/997968/tongji.gif\" /></p>\n<p>“要翻墙，<a href=\"http://idangxingdafa.info\" target=\"_blank\">用赛风”</a>.</p>\n","author":176,"categories":[1],"tags":[17167,8800]}