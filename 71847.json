{"id":71847,"link":"https://chinadigitaltimes.net/chinese/2010/05/bt雷人的程序语言/","date":"2010-05-12T10:00:15Z","modified":"2010-05-12T10:00:15Z","title":"BT雷人的程序语言","content":"<p>感谢河蟹网友<a href=\"http://coolshell.cn/?p=1142\">挠挠就痒</a>的分享<br /> 这个世界从来都不会缺少另类的东西，人类自然世界如此，计算机世界也一样。编程语言方面，看过本站《6个变态的C语言Hello World程序》的朋友们一定对BT和另类不会陌生，但那都是些小儿科，真正的BT和另类要是从语言级上来完成。让我们来看看其中一个比较另类的语言BrainFuck。看到这个程序语言的名字，请不要以为这是一个搞笑的语言，这是一个“严肃事情”，请大家用“最虔诚的态度”来阅读本文。</p>\n<p>BF语言介绍<br /> Brainfuck，是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于“绿王八”的原因，这种语言有时被称为brainf**k或brainf***，甚至被简称为BF。这种 语言，是一种按照“Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号的组合来完成。<br /> <span></span><br /> BF基于一个简单的机器模型，除了八个指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针(初始时指向数组的第一个字节)、以及用于输入输出的两个字节流。</p>\n<p>下面是这八种指令的描述，其中每个指令由一个字符标识：</p>\n<p>字符 含义<br /> &gt; 指针加一<br /> &lt; 指针减一<br /> + 指针指向的字节的值加一<br /> &#8211; 指针指向的字节的值减一<br /> . 输出指针指向的单元内容（ASCII码）<br /> , 输入内容到指针指向的单元（ASCII码）<br /> [ 如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处<br /> ] 如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</p>\n<p>（按照更节省时间的简单说法，]也可以说成“向后跳转到对应的[状态”。这两解释是一样的。）</p>\n<p>（第三种同价的说法，[意思是&#8221;向前跳转到对应的]“，]意思是”向后跳转到对应的[指令的次一指令处，如果指针指向的字节非零。&#8221;）</p>\n<p>Brainfuck程序可以用下面的替换方法翻译成C语言（假设ptr是char*类型）：</p>\n<p>Brainfuck C<br /> &gt; ++ptr;<br /> &lt; &#8211;ptr;<br /> + ++*ptr;<br /> &#8211; &#8211;*ptr;<br /> . putchar(*ptr);<br /> , *ptr =getchar();<br /> [ while (*ptr) {<br /> ] }</p>\n<p>BF解释器<br /> 因为 BrainFuck 只有八种指令，并且没有关键字，也不允许自定义标识符，因此它的编译器实现起来非常简单，初学 C 语言不久的人都可以自己编出来，尽管在座的各位每人都可以自己编一个，不过为了引起大家的兴趣，我这里还是给出大家一个官方发布的版本。这个程序只有短短 50 多行，并且完全由 ANSI C 写成，因此你随便找个 C 语言编译器，把它编译一下。</p>\n<p>查看源代码打印帮助01 #include ;</p>\n<p>02</p>\n<p>03 int  p, r, q;</p>\n<p>04 char a[5000], f[5000], b, o, *s=f;</p>\n<p>05</p>\n<p>06 void interpret(char *c)</p>\n<p>07 {</p>\n<p>08     char *d;</p>\n<p>09</p>\n<p>10     r++;</p>\n<p>11     while( *c ) {</p>\n<p>12         //if(strchr(“&lt;&gt;;+-,.[]\\n”,*c))printf(“%c”,*c);</p>\n<p>13         switch(o=1,*c++) {</p>\n<p>14             case ‘&lt; &#39;: p&#8211;;        break;</p>\n<p>15             case &#39;&gt;;’: p++;       break;</p>\n<p>16             case ‘+’: a[p]++;     break;</p>\n<p>17             case ‘-’: a[p]–;     break;</p>\n<p>18             case ‘.’: putchar(a[p]); fflush(stdout); break;</p>\n<p>19             case ‘,’: a[p]=getchar();fflush(stdout); break;</p>\n<p>20             case ‘[&#39;:</p>\n<p>21                 for( b=1,d=c; b &amp;&amp; *c; c++ )</p>\n<p>22                 b+=*c==&#39;[&#39;, b-=*c==&#39;]‘;</p>\n<p>23                 if(!b) {</p>\n<p>24                     c[-1]=0;</p>\n<p>25                     while( a[p] )</p>\n<p>26                     interpret(d);</p>\n<p>27                     c[-1]=’]&#39;;</p>\n<p>28                     break;</p>\n<p>29                 }</p>\n<p>30             case ‘]’:</p>\n<p>31                 puts(“UNBALANCED BRACKETS”), exit(0);</p>\n<p>32             case ‘#’:</p>\n<p>33                 if(q&gt;;2)</p>\n<p>34                 printf(“%2d %2d %2d %2d %2d %2d %2d %2d %2d %2d\\n%*s\\n”,</p>\n<p>35                 *a,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],3*p+2,”^”);</p>\n<p>36                 break;</p>\n<p>37             default: o=0;</p>\n<p>38         }</p>\n<p>39         if( p&lt;0 || p&gt;;100)</p>\n<p>40             puts(“RANGE ERROR”), exit(0);</p>\n<p>41     }</p>\n<p>42     r–;</p>\n<p>43     //        chkabort();</p>\n<p>44 }</p>\n<p>45</p>\n<p>46 main(int argc,char *argv[])</p>\n<p>47 {</p>\n<p>48     FILE *z;</p>\n<p>49</p>\n<p>50     q=argc;</p>\n<p>51</p>\n<p>52     if(z=fopen(argv[1],”r”)) {</p>\n<p>53         while( (b=getc(z))&gt;;0 )</p>\n<p>54             *s++=b;</p>\n<p>55         *s=0;</p>\n<p>56         interpret(f);</p>\n<p>57     }</p>\n<p>58 }</p>\n<p>当然，如果你觉得用C语言来实现BrainFuck语言的解释器是对BrainFuck这种语言的一种侮辱的话，我们的BrainFuck社区是绝对不能容忍你有这种想法的。因为我们有一个使用100%纯brainfuck写成的一个编译器awib：http://code.google.com/p/awib/</p>\n<p>Hello World<br /> ++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt; &lt;&lt;&lt;-]<br /> &gt;++.&gt;+.+++++++..+++.&gt;++.&lt; &lt;+++++++++++++++.<br /> &gt;.+++.——.——–.&gt;+.&gt;.怎么？看不懂吗？下面是解释：</p>\n<p>+++ +++ +++ +           initialize counter (cell #0) to 10<br /> [                       use loop to set the next four cells to 70/100/30/10<br /> &gt; +++ +++ +             add  7 to cell #1<br /> &gt; +++ +++ +++ +         add 10 to cell #2<br /> &gt; +++                   add  3 to cell #3<br /> &gt; +                     add  1 to cell #4<br /> &lt; &lt;&lt; &lt; &#8211;                 decrement counter (cell #0)<br /> ]<br /> &gt;++ .                   print ‘H’<br /> &gt;+.                     print ‘e’<br /> +++ +++ +.              print ‘l’<br /> .                       print ‘l’<br /> +++ .                   print ‘o’<br /> &gt;++ .                   print ‘ ‘<br /> &lt; &lt;+ +++ +++ +++ +++ ++. print &#39;W&#39;<br /> &gt;.                      print ‘o’<br /> +++ .                   print ‘r’<br /> — — .               print ‘l’<br /> — — –.             print ‘d’<br /> &gt;+.                     print ‘!’<br /> &gt;.                      print ‘\\n’相关链接：</p>\n<p>BF的官网：http://www.muppetlabs.com/~breadbox/bf/。<br /> BF的Wikipedia：http://en.wikipedia.org/wiki/Brainfuck。<br /> 其它另类语言<br /> 如果你要觉得BF已经很BT了，那么你就错了，下面这些程序语言更BT。</p>\n<p>WhiteSpace语言</p>\n<p>这是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。下面是它的一个示例：</p>\n<p>什么？你什么也没有看见，这就对了，因为这正是这门语言的独特之处。访问下面这个链接查看Hello,World示例。记得按Ctrl+A来查看程序。</p>\n<p>官网：http://compsoc.dur.ac.uk/whitespace/index.php。</p>\n<p>LOLCODE语言</p>\n<p>LOLCODE是一种建立在高度缩写的网络英语之上的编程语言，一般来说如果一个人能理解这种网络英语就能在未经训练的情况下读懂LOLCODE程序源代码。下面是其Hello,World例程：</p>\n<p>HAI<br /> CAN HAS STDIO?<br /> VISIBLE “HAI WORLD!”<br /> KTHXBYE官网：http://lolcode.com/</p>\n<p>中文编程语言</p>\n<p>不要以为只有老外才那么BT，咱们中国也有自己的BT编程语言。</p>\n<p>中文Basic</p>\n<p>中文指令  对应于的Applesoft BASIC<br /> 10 卜=0  10 Y=0<br /> 20 入 水, 火  20 INPUT E, F<br /> 30 從 日 = 水 到 火  30 FOR A = E TO F<br /> 40 卜 = 卜+對數(日)  40 Y = Y + LOG (A)<br /> 50 下一 日  50 NEXT A<br /> 60 印 卜  60 PRINT Y</p>\n<p>官网无法访问了，只能看看Wikipedia了：http://en.wikipedia.org/wiki/Chinese_BASIC</p>\n<p>中蟒语言（中文Python）</p>\n<p>下面的程序是不是很Cool？</p>\n<p>#!/usr/local/bin/cpython<br /> 回答 = 读入(‘你认为中文程式语言有存在价值吗 ? (有/没有)’)<br /> 如 回答 == ‘有’:<br /> 写 ‘好吧, 让我们一起努力!’<br /> 不然 回答 == ‘没有’:<br /> 写 ‘好吧,中文并没有作为程式语言的价值.’<br /> 否则:<br /> 写 ‘请认真考虑后再回答.’官网：http://www.chinesepython.org/</p>\n<p>差不多了，该结束了，再次说明，这是一篇很严肃的文章。</p>\n<p>(全文完)</p>\n<p>原文链接: <a href=\"http://kisshi.com/2010/05/11/bt-lei/\">http://kisshi.com/2010/05/11/bt-lei/</a> <br /> <a href=\"http://kisshi.com/\">河蟹娱乐</a> Copyright ©   2007-2009 爱祖国,爱人民,唉派对。<br /> 更多精彩欢迎您订阅<a href=\"http://feed.kisshi.com\">http://feed.kisshi.com</a>,更加欢迎<a href=\"http://kisshi.com/delivery/\">投稿</a><br /> <a href=\"http://www.gegehost.com/\">稳定快速独立博客主机</a>破盘价只要100元 <img src=\"http://img.tongji.linezing.com/922164/tongji.gif\"></p>\n<p> <a href=\"http://www.fanhuan.com/?utm_source=feed&amp;utm_medium=rss&amp;utm_term=gif&amp;utm_content=kisshi&amp;utm_campaign=rssads#kisshi\"><img src=\"http://img.fanhuan.com/kisshi.gif\"></a><img src=\"http://www1.feedsky.com/t1/365276242/kisshi/feedsky/s.gif?r=http://kisshi.com/2010/05/11/bt-lei/\" border=\"0\" height=\"0\" width=\"0\"></p>\n<p><a href=\"http://www1.feedsky.com/r/l/feedsky/kisshi/365276242/art01.html\"><img border=\"0\" ismap src=\"http://www1.feedsky.com/r/i/feedsky/kisshi/365276242/art01.gif\"></a></p>\n","author":141,"categories":[20534],"tags":[5908,8819,10358,10359,10360,8805]}