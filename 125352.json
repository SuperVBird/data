{"id":125352,"link":"https://chinadigitaltimes.net/chinese/2010/11/safari-on-iphone-ipad-4-2-accelerometer-websockets-better-html5-support/","date":"2010-11-24T17:52:30Z","modified":"2010-11-24T17:52:30Z","title":"Safari on iPhone &amp; iPad 4.2: Accelerometer, WebSockets &amp; better HTML5 support","content":"<p><p>来自: <a href=\"http://www.feedzshare.com/b/6442203/2\">Mobile Web Programming &#8211; FeedzShare</a>  <a href=\"http://www.feedzshare.com/b/341/2\">Daring Fireball &#8211; FeedzShare</a>  <br />\n<br />发布时间:2010年11月23日,  已有 5 人推荐 </p>\n<hr>\n<div>\n<div>\n\t\t<a href=\"http://twitter.com/share\">Tweet</a>\n\t</div>\n<p>iOS 4.2 is a free update for every iPhone, iPod or iPad device available now. This new release provides some major changes on HTML5 and W3C future standards support, like <strong>WebSockets</strong> and <strong>Accelerometer support</strong>, print support, new JavaScript data-types and better SVG support.<span></span></p>\n<hr>\n<p>\nApple didn’t update yet Safari documentation to reflect these new APIs. This information is based on JavaScript research and testing over Safari itself I’ve been doing. The list of new features I’ve detected are:</p>\n<ul>\n<li><strong>Accelerometer</strong> support through the DeviceOrientation API</li>\n<li><strong>WebSockets</strong> API from HTML5</li>\n<li>Updated <strong>HTML5 Form</strong> Support</li>\n<li>Partial <strong>XHR-2</strong> Support</li>\n<li>Print Support</li>\n<li>New JavaScript data types</li>\n<li>New DOM events</li>\n<li>Enhanced <strong>SVG</strong> and <strong>Canvas</strong> support</li>\n</ul>\n<h3>Accelerometer support</h3>\n<p>As you may know, iOS devices all have accelerometer sensor (plus others, like magnetometer and gyroscope on some devices) but a web developer didn’t have access to such sensors, until now. Safari now supports the <strong><a href=\"http://dev.w3.org/geo/api/spec-source-orientation.html\">DeviceOrientation API</a></strong> (W3C draft); looking at the available objects, it seems that all the API is fully supported (including ondeviceorientation and ondevicemotion events), however on my tests up to now, I could only get <strong>accelerometer</strong> data with success.</p>\n<p>If you have an iOS 4.2 device, go to <strong><a href=\"http://ad.ag/wjmtgt\">ad.ag/wjmtgt</a> </strong>from Safari browser. I’ve coded a sample in 15 minutes using JavaScript and some CSS3: it’s the typical ball moving on the screen regarding the iOS device’s position. The next video shows this sample in action:</p>\n</p>\n<p>The API detects and delivers accelerometer data 50 times per second. To get them you need to capture <strong>ondevicemotion</strong> event on the window global object (or using <strong>addEventListener</strong> with <strong>devicemotion</strong> as the event name) and then use the <strong>accelerationIncludingGravity</strong> property on the <strong>DeviceOrientationEvent</strong> parameter. It has three values, <strong>x</strong>, <strong>y</strong> &#038; <strong>z</strong>, representing the acceleration in g (gravities) for each axis. You should use typical accelerometer math for games, effects or CSS transformations.</p>\n<p><code>window.ondevicemotion = function(event)  {<br />\n// event.accelerationIncludingGravity.x<br />\n// event.accelerationIncludingGravity.y<br />\n// event.accelerationIncludingGravity.z<br />\n}<br />\n</code></p>\n<h3>WebSockets</h3>\n<p>The other big new update is WebSockets support. <a href=\"http://dev.w3.org/html5/websockets/\">WebSockets</a> is a W3C HTML5 API currently in draft that allows JavaScript to use an open, bi-directional full-duplex connection to a server using TCP sockets. This is a great news for chat and real-time applications that will reduce AJAX periodic calls.</p>\n<p>You will need a web server understanding the new WS protocol through an HTTP handshake. You should always rely on a fallback mechanism if WS is not supported on the server, or because of a proxy/gateway.</p>\n<h3>HTML5 Form Support</h3>\n<p>Besides the HTML5 Form support I’ve already discussed on <a href=\"http://www.mobilexweb.com/book\">the book</a>, now we have support for the <strong>required</strong> boolean attribute and the new <strong>:invalid</strong> CSS pseudoclass. Therefore, the following code will show a green input text when completed and a yellow one when incomplete:</p>\n<p><code> </p>\n<style>\ninput {<br />\nbackground-color: green;<br />\ncolor: white;<br />\n}<br />\ninput:invalid {<br />\nbackground-color: yellow;<br />\n}<br />\n</style>\n<p>\n<input type=\"text\" required><br />\n</code></p>\n<h3>AJAX 2</h3>\n<p>The W3C draft called <a href=\"http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html\">XMLHttpRequest Level 2</a> (aka AJAX 2) adds new features to the XHR object and functionality. From that specification, now Safari supports the <a href=\"https://developer.mozilla.org/en/XMLHttpRequest/FormData\">FormData</a> object that allow us to send form data via AJAX easily.</p>\n<h3>Print Support</h3>\n<p>iOS 4.2 includes AirPrint, a wireless printing solution. Therefore, we can use now <strong>window.print()</strong> to invoke the printing dialog on Safari.</p>\n<h3>New JavaScript Data-types</h3>\n<p>Safari now supports the Blob class and many integer-type collections, like Float32Array, Int8Array, Uint8Array, Int16Array Uint16Aray, Int32Array and UInt32Array defined on <a href=\"https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/doc/spec/TypedArray-spec.html\">Typed Arrays</a> specification. More information on <a href=\"https://developer.mozilla.org/en/JavaScript_typed_arrays\">Firefox website</a>.</p>\n<h3>New DOM events</h3>\n<p>Besides the new motion events, now we can use the HTML5 new <strong>onhashchange</strong> event that detects changes on the URL after the hash (#) for AJAX-like webapps; the <strong>invalid, onbeforeload and onpopstate</strong> events from HTML5 draft specification.</p>\n<p>Now, we can also use <strong>window.captureEvents</strong> and <strong>window.releaseEvents</strong> to capture events in a global way.</p>\n<h3>Enhanced SVG and Canvas support</h3>\n<p>iOS supports SVG as a separate document and also inline SVG (using the <strong>svg</strong> tag). And now we can also create SVG documents on the fly using a list of more than 20 classes SVG____, like <strong>SVGDocument</strong>, <strong>SVGImage</strong> directly from our code.<br />\nFrom HTML5 Canvas, there is now support for <a href=\"http://nooshu.com/using-image-data-inside-the-html5-canvas-element/\">ImageData</a> data-type, a way to manipulate images pixel by pixel from JavaScript.</p>\n<h3>Other stuff</h3>\n<ul>\n<li>A <strong>styleMedia</strong> attribute for window global object.</li>\n<li>A <strong>WebGLRenderingContext</strong> class available, part of the 3D Drawing API (aka WebGL). However, I’m not seeing any real WebGL support.</li>\n<li>A global<strong> RGBColor</strong> constructor</li>\n</ul>\n<p>I will continue testing new HTML5 features and APIs available in this new release. Do you know any other new feature? Feel free to contact me by twitter (@firt) or commenting this post.</p>\n</div>\n<p><img src=\"http://img.tongji.linezing.com/1017243/tongji.gif\" /><img src=\"http://img.tongji.linezing.com/997968/tongji.gif\" /></p>\n","author":176,"categories":[1],"tags":[]}