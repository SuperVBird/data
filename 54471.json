{"id":54471,"link":"https://chinadigitaltimes.net/chinese/2010/03/ideas的演变-how-to-kill-too-many-ideas/","date":"2010-03-29T21:33:04Z","modified":"2010-03-29T21:33:04Z","title":"Ideas的演变 &#8212; How to kill too many ideas","content":"<p><p>如何把ideas给kill掉，这是一个很难的艺术。</p>\n<p>这么多年下来，关于idea的问题经历了一个漫长的演变过程：最初的时候苦思冥想也没有idea; 然后是开始依稀有些idea但却总怀疑四处求证这究竟是不是个愚蠢或自以为是的想法; 再后来开始能偶尔想到一两个好idea欣喜若狂视为珍宝而深藏不露; 接下来发现idea常常是思如泉涌常和朋友聊得“火花四溅”而得意洋洋; 然后的阶段开始认识到idea其实本身没有价值，有价值的是能把idea执行出来的能力；再接下来，痛苦地发现原来很多项目和计划的拖延乃至失败不是因为没有idea而是因为idea太多，乃至于要么目标过大，要么不断因为idea而增加或者改变目标； 所以现在的阶段，我的问题在于如何把太多的idea给kill掉。</p>\n<p>我并不认为Kill掉ideas就只是简单的抛弃，或者只是在一定阶段内不考虑新的idea.  简单抛弃ideas实际上做不到，ideas产生了，用鸵鸟算法处理，表面上好像可行，实际上对个人伤在自己内心，对团队伤在创新的精神。 一点阶段内不考虑新idea, 对一些有明确deadline的项目一定程度可行，但仍然需要取决于这些idea和目前任务是否相关。 如何有效地kill掉idea就是一种艰难的艺术，至今我仍然在求索之中，谈不上什么经验，但可以分享一些目前的做法。</p>\n<p>&#8211; 采用类似GTD的方法，一旦产生了idea, 迅速记录下来，“清空”自己的大脑。 这我觉得非常重要，对个人，清空大脑能让自己集中精力在最重要的事情，同时记录在案可以防止自己觉得抛弃了有意义的想法而内疚，或者因为忧虑这些idea而干扰了自己的思路； 对团队，除了前述的个人的因素外，还能保持一个团队的创新精神和交流分享精神，避免团队成员对暂时集中于阶段目标而不考虑新idea产生悲观情绪； </p>\n<p>&#8211; 每过一段时间就安排有限的时间来review这些从大脑内清空的idea, 可以一周花上1晚上时间，或者每天花30分钟。 review这些idea, 可以kill掉一些明显不可行的，考虑一些可以长期打算的，以及发现一些可以立刻用于改进现状的 &#8212; 是的，的确有一些可以立刻开始做，有些新idea可能是对目前正在做的事情的改进甚至否定。</p>\n<p>&#8211; 根据资源的限制而kill或者搁置idea. 这我现在觉得是最重要和最有价值的部分 &#8212; ideas不错，但是我是否有资源来实现？ 我是否有时间来实现？我现在的做法是把前面一步认为可以先在考虑的新idea在这个专门的考虑时间里干脆展开规划入当前的计划 &#8212; 然后，面对这个改变了的计划（大部分时候是加入了更多东西而不是减少了）根据自己的资源和时间现状划分优先级别， 划分完优先级后，把所有的非P1的东西统统扔到backlog里去，只集中于p1.  </p>\n<p>  这个方法我觉得甚为有效，往往前半阶段增加了很多东西，然后后半阶段又减少了很多东西。最终的结果往往是在原有计划上的微调，有些时候是继续原有计划，有些时候略为增加但是有意义的增加，更多时候我发现是减少！ 为什么能减少， 因为新的idea比老计划可能更有效了，因为这种idea的持续review和priority划分能更好地规划。 </p>\n<p>  这一步的关键在于对资源和时间限制的认识，我感觉这个步骤和认识实际很困难。我觉得很多时候创新出现在startup而不在大公司，原因就是恰恰因为startup的资源如此缺少、时间如此紧迫，以至于让身处其中的人能更容易认识到资源和时间的限制。 大的组织里，要么因为缺乏对资源的正确认识而添加了不必要的东西，要么因为一些恪守“项目管理”的经理人的控制而伤害创新的热情和创新可能带来的积极改进。</p>\n<p>这方面我自己做的并不好，希望有经验的同学分享你们的做法。 我目前发现一个比较有效的方法是采用比较low tech的方法，用post-it把任务贴在墙上。自己定一个时间，目标就是这个时间要能交付一个有意义的东西，于是时间解决了。 每张post-it保持一个类似的时间估算，这样根据墙上的post-it的数量就可以直观知道资源的数量。 我把墙上划分为3个区域，todo, done, defered.  Todo区域只给出一定的面积，在这个面积内的就是能完成所具备的资源。done的目的纯粹是为了鼓舞士气，看看done区的字帖越来越多，心情就很愉快；出现了危机，review done区域的，就能了解究竟是不是出现了效率的问题。 defered是一个动态区域，这里留给因为优先级而被拿走的，偶尔你也可能把这里的一些东西拿回去。</p>\n<p>这种做法其实就是scrum的做法，只不过我现在倾向于对于小team, scrum也许不要用软件工具管理，而是用墙、白板、Post-it来进行。</p>\n</p>\n<p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/robertmao/~4/DZq4swetDA8\" width=\"1\"></p>\n","author":176,"categories":[20534],"tags":[]}