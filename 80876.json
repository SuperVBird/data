{"id":80876,"link":"https://chinadigitaltimes.net/chinese/2010/06/探索google-app-engine背后的奥秘（3）-google-app-engine的简介/","date":"2010-06-26T07:17:12Z","modified":"2010-06-26T07:17:12Z","title":"探索Google App Engine背后的奥秘（3）- Google App Engine的简介","content":"<p>按：此为客座博文系列。投稿人吴朱华曾在IBM中国研究院从事与云计算相关的研究，现在则致力于云计算技术。 通过前面两篇介绍，大家应该对Google强大的基础设施有一定的了解。本篇开始介绍构筑在这强大基础设施之上的Google App Engine。 Google App Engine的介绍 由于发布S3和EC2这两个优秀的云服务，使得Amazon已经率先在云计算市场站稳了脚跟，而身为云计算这个浪潮的发起者之一的Google肯定不甘示弱，并在2008年四月份推出了Google App Engine这项PaaS服务，虽然现在无法称其为一个革命性的产品，但肯定是现在市面上最成熟，并且功能最全面的PaaS平台。 Google App Engine 提供一整套开发组件来让用户轻松地在本地构建和调试网络应用，之后能让用户在Google强大的基础设施上部署和运行网络应用程序，并自动根据应用所承受的负载来对应用进行扩展，并免去用户对应用和服务器等的维护工作。同时提供大量的免费额度和灵活的资费标准。在开发语言方面，现支持Java和Python这两种语言，并为这两种语言提供基本相同的功能和API。 功能 在功能上，主要有六个方面： 动态网络服务，并提供对常用网络技术的支持，比如SSL等 。 持久存储空间，并支持简单的查询和本地事务。 能对应用进行自动扩展和负载平衡。 一套功能完整的本地开发环境，可以让用户在本机上对App Engine进行开发和调试。 支持包括Email和用户认证等多种服务。 提供能在指定时间和定期触发事件的计划任务和能实现后台处理的任务队列。 使用流程 整个使用流程主要包括五个步骤： 下载SDK和IDE，并在本地搭建开发环境。 在本地对应用进行开发和调试。 使用GAE自带上传工具来将应用部署到平台上。 在管理界面中启动这个应用。 利用管理界面来监控整个应用的运行状态和资费。 由于本系列是专注于GAE的实现和设计两方面，所以不会对GAE的使用有非常深入地介绍，如果希望大家对GAE的使用方面有更深的理解，具体可以参看一下GAE的官方文档。 Google App Engine的主要组成部分 主要可分为五部分： 应用服务器：主要是用于接收来自于外部的Web请求。 Datastore：主要用于对信息进行持久化，并基于Google著名的BigTable技术。 服务：除了必备的应用服务器和Datastore之外，GAE还自带很多服务来帮助开发者，比如：Memcache，邮件，网页抓取，任务队列，XMPP等。 管理界面：主要用于管理应用并监控应用的运行状态，比如，消耗了多少资源，发送了多少邮件和应用运行的日志等。 本地开发环境：主要是帮助用户在本地开发和调试基于GAE的应用，包括用于安全调试的沙盒，SDK和IDE插件等工具。 应用服务器 应用服务器依据其支持语言的不同而有不同的实现。 Python的实现 Python版应用服务器的基础就是普通的Python 2.5.2版的Runtime，并考虑在在未来版本中添加对Python 3的支持，但是因为Python 3对Python而言，就好比Java2之于Java1，跨度非常大，所以引入Python3的难度很大。在Web技术方面，支持诸如Django，CherryPy，Pylons和Web2py等Python Web框架，并自带名为&#8221;WSGI&#8221;的CGI框架。虽然Python版应用服务器是基于标准的Python Runtime，但是为了安全并更好地适应App Engine的整体架构，对运行在应用服务器内的代码设置了很多方面的限制，比如不能加载用C编写Python模块和无法创建Socket等。 Java的实现 在实现方面，Java版应用服务器和Python版基本一致，也是基于标准的Java Web容器，而且选用了轻量级的Jetty技术，并跑在Java 6上。通过这个Web容器不仅能运行常见的Java Web 技术，包括Servlet，JSP，JSTL和GWT等，而且还能跑大多数常用的Java API（App Engine有一个The JRE Class White List来定义那些Java API能在App Engine的环境中被使用）和一些基于JVM的脚本语言，例如JavaScript，Ruby或Scala等，但同样无法创建Socket和Thread，或者对文件进行读写，也不支持一些比较高阶的API和框架，包括JDBC，JSF，Struts 2，RMI，JAX-RPC和Hibernate等。 Datastore Datastore提供了一整套强大的分布式数据存储和查询服务，并能通过水平扩展来支撑海量的数据。但Datastore并不是传统的关系型数据库，它主要以&#8221;Entity&#8221;的形式存储数据，一个Entity包括一个Kind（在概念上和数据库的Table比较类似）和一系列属性。 Datastore提供强一致性和乐观（optimistic）同步控制，而在事务方面，则支持本地事务，也就是在只能同一个Entity Group内执行事务。 在接口方面，Python版提供了非常丰富的接口，而且还包括名为GQL的查询语言，而Java版则提供了标准的JDO和JPA这两套API。 而且Google已经在今年的Google I/O大会上宣布将在未来的App Engine for Business套件中包含标准的SQL数据库服务，但现在还不确定这个SQL数据库的实现方式，是基于开源的MySQL技术，还是基于其私有的实现，这是一个问题。 服务 Memcache Memcache是大中型网站所备的服务，主要用来在内存中存储常用的数据，而App Engine也包含了这个服务。有趣的是App &#8230;</p>\n<p>Continued here:<br />\n<a target=\"_blank\" href=\"http://www.dbanotes.net/arch/google_app_engine-intro.html\" title=\"探索Google App Engine背后的奥秘（3）- Google App Engine的简介\">探索Google App Engine背后的奥秘（3）- Google App Engine的简介</a></p>\n","author":176,"categories":[9203],"tags":[5908,310,9881]}