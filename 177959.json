{"id":177959,"link":"https://chinadigitaltimes.net/chinese/2011/09/编程随想-开源点评：zeromq简介/","date":"2011-09-08T07:00:45Z","modified":"2011-09-08T07:00:45Z","title":"编程随想 | 开源点评：ZeroMQ简介","content":"<p>　　貌似有2个月没写技术帖了。今天，向各位程序猿同学介绍一个和网络通讯有关的开源项目——ZeroMQ（绰号 ØMQ，以下简称 ZMQ）。事先声明，本帖仅仅是<b>简介</b>，不涉及太深入的话题。</p>\n<h2>★ZMQ是啥玩意儿？</h2>\n<p>　　通俗地说，ZMQ是一个开源的、跨语言的、非常简洁的、非常高性能、非常灵活的网络通讯库。<br />\n<br />　　它的官方网站在&#8221;<a rel=\"nofollow\" href=\"http://www.zeromq.org/\">这里</a>&#8220;，维基百科的介绍在&#8221;<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/%C3%98MQ\">这里</a>&#8220;（暂时没有中文的维基词条）。<br />\n<br />　　这玩意儿推出的时间不长，貌似09年下半年才推出1.0.1版本。俺去年开始接触它，感觉实在不错，今年就已经用于公司的产品中。最近一段时间，对 ZMQ 的好评日渐增多，所以俺也来赶赶潮流，在俺博客里忽悠一下。<br />\n<br />　　接下来，就针对ZMQ的几大特点，分别聊一聊。</p>\n<h2>★简单</h2>\n<p>　　ZMQ的首要特点，就是简单（从它的名字也能感觉得到）。</p>\n<p>◇封装导致的简单<br />\n<br />　　相比原始的 socket API，ZMQ 封装掉了很多东西，免去了开发人员的很多麻烦。<br />\n<br />　　比如，传统的 TCP 是基于字节流进行收发，因此程序猿常常要自己去处理数据块与数据块之间的边界（断界处理）；与之相对，ZMQ 是以消息为单位进行收发，它确保你每次发出／收到的，都是一个消息块。这样一来，就省却了不少代码量。<br />\n<br />　　比如，基于 socket API 进行 TCP 通讯，你需要自己处理很多网络异常（比如连接异常中断以及重连），即使有经验的程序员，也未必能写得严密。而在 ZMQ 中，这些琐事统统不用程序猿操心。<br />\n<br />　　再比如，用传统的 socket API，当你想提高通讯性能，往往要搞些异步（非阻塞）、缓冲区、多线程之类的把戏。而这些东西，ZMQ 也帮你封装掉了。<br />\n<br />　　总而言之，ZMQ 对很多底层细节的封装，让你的网络程序代码变得简单，写起来又快又轻松。</p>\n<p>◇API的简单<br />\n<br />　　ZMQ 的 API 接口很少，而且在风格上非常类似于 BSD Socket。如果你曾经用 socket API 写过程序，那要上手 ZMQ 是非常容易的。如果你是 Java 程序猿，搞过 JMS API（比如 ActiveMQ），那你会发觉两者的 API 简直是天壤之别。顺便抱怨一下：Java 的 JMS API，那可真是复杂啊！</p>\n<p>◇具体的示例<br />\n<br />　　为了增加说服力，下面给出 Python 语言实现的 Echo Server 代码（所谓的Echo Server，是一种最简单的服务端程序。它把收到的信息原样回送给客户端程序）。</p>\n<p>#服务端程序<br />\n<br />import zmq<br />\n<br />context = zmq.Context()<br />\n<br />socket = context.socket(zmq.REP)<br />\n<br />socket.bind(&#8220;tcp://127.0.0.1:1234&#8221;)</p>\n<p>while True :<br />\n<br />    msg = socket.recv()<br />\n<br />    socket.send(msg)</p>\n<p>#客户端端程序<br />\n<br />import zmq<br />\n<br />context = zmq.Context()<br />\n<br />socket = context.socket(zmq.REQ)<br />\n<br />socket.connect(&#8220;tcp://127.0.0.1:1234&#8221;)</p>\n<p>msg_send = &#8220;xxx&#8221;<br />\n<br />socket.send(msg_send)<br />\n<br />print &#8220;Send:&#8221;, msg_send<br />\n<br />msg_recv = socket.recv()<br />\n<br />print &#8220;Receive:&#8221;, msg_recv</p>\n<p>　　从上述示例代码，大伙儿应该能感觉到：ZMQ 的使用，是非常简单的。</p>\n<h2>★灵活</h2>\n<p>　　所谓的灵活性，主要指如下2方面。</p>\n<p>◇适用于多种通讯环境<br />\n<br />　　ZMQ 可以灵活地支持多种通讯环境（进程内，主机内跨进程、跨主机）。ZMQ 的 API 设计得很好，以至于你的代码只要做很小的改动（甚至不改动），就可以适用于不同的通讯环境。<br />\n<br />　　在刚才的例子里，有这样的语句 socket.connect(&#8220;tcp://127.0.0.1:1234&#8221;)。其中的 &#8220;tcp://127.0.0.1:1234&#8221; 是表示通讯对端的地址串。ZMQ 约定地址串使用如下格式：<b>transport://endpoint</b> 。地址串前面的 transport 表示通讯的类型，目前支持 inproc（进程内），ipc（主机内跨进程），tcp（跨主机），pgm（跨主机，支持多播）共4种方式。<br />\n<br />　　对程序猿来说，如果你把通讯的地址串保存到配置文件中，就完全可以用一套代码来搞定多种通讯方式，非常爽！</p>\n<p>◇支持多种通讯模式<br />\n<br />　　ZMQ将常见的通讯场景进行了归纳，总结了如下几种不同的模式。<br />\n<br />PUB and SUB<br />\n<br />REQ and REP<br />\n<br />REQ and ROUTER<br />\n<br />DEALER and REP<br />\n<br />DEALER and ROUTER<br />\n<br />DEALER and DEALER<br />\n<br />ROUTER and ROUTER<br />\n<br />PUSH and PULL<br />\n<br />PAIR and PAIR<br />\n<br />　　限于篇幅，俺就不深入介绍每种模式了，有兴趣的同学请看官方文档（在&#8221;<a rel=\"nofollow\" href=\"http://zguide.zeromq.org/page:all#Core-Messaging-Patterns\">这里</a>&#8220;）。</p>\n<h2>★跨语言</h2>\n<p>　　为啥俺要强调跨语言的特色捏？通常来说，用得着网络通讯库的软件系统，某种程度上都算是分布式系统。如果开发的分布式系统比较复杂，要想用一种编程语言通吃，难度较大。因此，在稍微复杂的分布式系统中，采用多种编程语言是常有的事儿（至少俺的经历是如此）。所以，ZMQ 的这个<b>跨语言</b>特色就显得非常重要了。<br />\n<br />　　在官方网站的文档中，给出了如下许多编程语言的示例（链接在&#8221;<a rel=\"nofollow\" href=\"https://github.com/imatix/zguide/tree/master/examples/\">这里</a>&#8220;）。为避免引发编程语言的名次之争，以下按照字母序排列。<br />\n<br />Ada, Basic, C#, C, C++, Common Lisp, Erlang, Go, Haskell, Haxe, Java, JavaScript(Node.js), Lua, Objective-C, PHP, Perl, Python, Racket, Ruby, Scala<br />\n<br />　　这个语言清单太全了，居然有2个语言，俺都没听说过。可以不夸张地说——常用的编程语言，都可以找到相应的 ZMQ 封装库。</p>\n<h2>★高性能</h2>\n<p>　　说到性能，这可是 ZMQ 吹嘘的主要亮点。首先，ZMQ 是用 C/C++ 开发的（C/C++ 的性能，那可是公认滴）；其次，ZMQ 本身的协议格式定义得很简洁（相对来说，JMS 规范中的协议格式就复杂多了）。所以，它的性能远远高于其它的消息队列软件。甚至可以说，用 ZMQ 的性能，跟用传统 socket API 的性能，是不相上下滴。<br />\n<br />　　为了让大伙儿有一个感性的认识，俺特地找来了消息队列软件的性能测评。这是某老外写的一篇帖子（在&#8221;<a rel=\"nofollow\" href=\"http://mikehadlow.blogspot.com/2011/04/message-queue-shootout.html\">这里</a>&#8220;），不懂洋文的同学可以看&#8221;<a rel=\"nofollow\" href=\"http://kb.cnblogs.com/page/100982/\">这里</a>&#8220;。连帖子都懒得看的同学，可以直接看下图。<br />\n<br /><center><img src=\"http://blob-s-docs.googlegroups.com/docs/OgAAABNdwNWFGFZEpNsy7id0do9EGaCgJIqBQNzzw49mVt0lpZHCWUuNoy5nuwC8VLTKAbBUCBSQBGg4S1UZikmh3GUA15jOjG7Mfc_VVwfAGm5MrBI22eWT7sWL\" alt=\"不见图、请翻墙\" /></center><br />\n<br />　　从图中可以明显看出，ZMQ 相比其它几款MQ，简直是鹤立鸡群啊！性能根本不在一个档次嘛。</p>\n<h2>★总结</h2>\n<p>　　总体而言，ZMQ 是非常值得大伙儿去尝试的一个网络通讯库。即使工作中用不到，业余时间玩玩也是不错滴。<br />\n<br />　　本帖子发出后，如果感兴趣的人较多，俺会根据反馈，再聊一些深入的话题。</p>\n<div>================================</p>\n<h4>版权声明</h4>\n<p>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&#8221;编程随想&#8221;和本文原始地址。</p>\n<h4>学习翻墙</h4>\n<p>发任意邮件到<b>help_gfw@yahoo.com</b>即可自动获取翻墙扫盲教程;别用国内邮箱,易被墙。如有其它问题要联系俺,请写信到<b>program.think@gmail.com</b><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5235590154125226279-8576816121140867274?l=program-think.blogspot.com\" alt=\"\" /></div>\n<div>\n<a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=LVs-2JNdmXI:PEJgosBzQLE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=yIl2AUoC8zA\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=LVs-2JNdmXI:PEJgosBzQLE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=qj6IDK7rITs\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=LVs-2JNdmXI:PEJgosBzQLE:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/programthink?d=7Q72WNTAKBA\" border=\"0\" /></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/programthink?a=LVs-2JNdmXI:PEJgosBzQLE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/programthink?i=LVs-2JNdmXI:PEJgosBzQLE:V_sGLiPBpWU\" border=\"0\" /></a>\n</div>\n<p><img src=\"http://feeds.feedburner.com/~r/programthink/~4/LVs-2JNdmXI\" height=\"1\" width=\"1\" /></p>\n<p><img src=\"http://chinadigitaltimes.net/chinese/files/2011/09/b12044d5m5MrBI22eWT7sWL-150x150.jpg\" /></p>\n<p><small>本文由自动聚合程序取自网络，内容和观点不代表数字时代立场</small></p>\n<form method=\"POST\" action=\"http://www.feedblitz.com/f/f.fbz?AddNewUserDirect\">\n定期获得翻墙信息？<a href=\"http://www.feedblitz.com/f/?Sub=750556\">请电邮订阅数字时代</a> <br /><input name=\"EMAIL\" maxlength=\"64\" type=\"text\" size=\"25\" value=\"\"><br />\n<input name=\"FEEDID\" type=\"hidden\" value=\"750556\"><br />\n<input name=\"PUBLISHER\" type=\"hidden\" value=\"7485568\"><br />\n<input type=\"submit\" value=\"订阅!\"><br />\n</form>\n","author":991,"categories":[9203],"tags":[9400]}