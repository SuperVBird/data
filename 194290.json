{"id":194290,"link":"https://chinadigitaltimes.net/chinese/2011/11/翻墙-hyk-proxy-–-project-hosting-on-google-code/","date":"2011-11-06T00:00:39Z","modified":"2011-11-06T00:00:39Z","title":"翻墙 | hyk-proxy – Project Hosting on Google Code","content":"<p><p>来源：<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/\">http://code.google.com/p/hyk-proxy/</a></p>\n<p> </p>\n<h1><strong>关于</strong></h1>\n<ul>\n<li>hyk-proxy是一个web proxy框架，支持基于<tt>Google AppEngine</tt>平台和<a rel=\"nofollow\" target=\"_blank\" href=\"https://seattlegeni.cs.washington.edu/\">Seattle平台</a>，以及PHP Web空间的proxy实现</li>\n<li>hyk-proxy从V0.9.0开始结构更改为framework+plugins方式，具体proxy实现由各个plugin完成</li>\n<li>在基于<tt>AppEngine</tt>实现的proxy部分，展示了通过RPC来实现高性能web proxy的途径。基于目前基于<tt>AppEngine</tt>部分实现机制，将来还可以实现暴露更多GAE特有功能,实现为一个远程的GAE lib，而不仅仅作为简单web proxy（目前已经实现用户权限管理/统计/基于用户流量控制等功能）。</li>\n<li>在基于Seattle部分，目前仅实现web proxy功能，包括完整的https tunnel</li>\n<li>在基于PHP Web空间部分，实现了http proxy功能，以及满足特定网络条件下的完全https tunnel</li>\n<li>hyk-proxy目前支持HTTP(S) to GAE/XMPP to GAE/TCP to Seattle/HTTP to PHP四种方式完成web proxy功能</li>\n<li>hyk-proxy从V0.8.6开始支持plugin，理论上可以任意扩展而不仅仅局限于GAE/Seattle/PHP</li>\n</ul>\n<h1><a rel=\"nofollow\" name=\"hyk-proxy&#x00539f;&#x007406;\"></a><strong>hyk-proxy原理</strong></h1>\n<ul>\n<li>hyk-proxy分为两部分，一部分运行于远程server上，如GAE/Seattle/PHP Web Space，属于remote server;另一部分运行于本地，属于local server,实质为一个中转的http server。</li>\n<li>当浏览器设置的代理服务器地址为local server地址时，local server将浏览器的请求编码发送给remote server执行proxy功能</li>\n<ol>\n<li>若remote server为GAE平台，则local server将http请求通过一个通用RPC框架远程调用到remote server上，获取远程调用结果；</li>\n<li>若remote server为Seattle平台， 则local server将http请求加密后直接转发给remote server</li>\n<li>若remote server为PHP Space，实现原理类似Seattle部分，不同之处在于https tunnel实现是另外一种构建tunnel技术，对当前网络条件也有约束</li>\n</ol>\n<li>local server在获取调用结果简单处理后，转给浏览器完成一次代理访问。</li>\n<li>一次web访问经过此代理的完整过程如下：</li>\n<blockquote>\n<p>Browser<tt><--></tt>Local Server<tt><--></tt>Remote Server<tt><--></tt>Real Web Server</p>\n</blockquote>\n</ul>\n<blockquote>\n<p>其中Local Server与Remote Server之间属于通信层部分，不局限于HTTP连接；如GAE Remote Server由于防火墙原因无法直接通过HTTP连接，可采用XMPP模式穿越</p>\n</blockquote>\n<ul>\n<li>由于基于<tt>AppEngine</tt>部分RPC框架通信层部分可以替换，因此local server与GAE remote server之间的通信方式可以视实际情况替换。由于GAE本身的限制，目前理论上只有三种方式可以选择：</li>\n<ol>\n<li>HTTP，local server作为HTTP client访问remote server</li>\n<li>XMPP，local server作为一个XMPP user与remote server进行通信</li>\n<li>EMAIL，local server 与remote server发送/接受email通信（由于EMail限制较大，不适于用于RPC通信协议，目前不会实现）</li>\n</ol>\n<li>而基于Seattle部分则在理论上支持TCP/UDP通信，目前实现TCP连接</li>\n<li>基于PHP Web Hosting部分，目前通过HTTP方式完成普通http proxy，以及一种tunnel技术完成https proxy实现</li>\n<li>hyk-proxy目前支持的四种默认内部proxy模式比较</li>\n<ul>\n<li>HTTP2GAE/HTTPS2GAE</li>\n<blockquote>\n<p>由于服务器的先天优势，在性能上相比其它方式占有绝对优势；不足则在于严重依赖GAE/Google的服务直连可达情况</p>\n</blockquote>\n<li>XMPP2GAE</li>\n<blockquote>\n<p>由于是绕道XMPP服务，所以HTTP模式的不足在这里是不存在的；此外，由于这里默认是SSL加密通讯，通讯安全性更强；由于前面所说的原因，在速度上较HTTP有所欠缺</p>\n</blockquote>\n<li>Seattle</li>\n<blockquote>\n<p>Seattle是另一个云计算服务，在编程模型上的限制较GAE以及PHP远少，所以可以按照标准模式实现HTTPS的proxy（没有证书问题），以及没有GAE的一些固有限制情况下（GAE的固有限制看<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/SpecialProxyAutoConfig\">这里</a>）;当然，其弱势在于Seattle服务的稳定性以及Seattle服务器的带宽性能</p>\n</blockquote>\n<li>PHP</li>\n<blockquote>\n<p>基于PHP的实现相对于GAE的优势在于限制较少，以及在满足特定条件下可以实现完整https tunnel；相对于Seattle的优势在于服务的稳定性以及较快的带宽</p>\n</blockquote>\n</ul>\n</ul>\n<h1><a rel=\"nofollow\" name=\"hyk-proxy&#x007684;&#x0063d2;&#x004ef6;\"></a><strong>hyk-proxy的插件</strong></h1>\n<ul>\n<li>hyk-proxy中很多功能由插件支持，默认并不安装，如Seattle/PHP/SPAC等，所有支持的插件具体说明/下载请查看项目<a rel=\"nofollow\" target=\"_blank\" href=\"http://hyk-proxy-plugins.googlecode.com/\">hyk-proxy-plugins</a></li>\n</ul>\n<h1><a rel=\"nofollow\" name=\"&#x005982;&#x004f55;&#x004f7f;&#x007528;\"></a><strong>如何使用</strong></h1>\n<ul>\n<li>安装运行依赖</li>\n<ol>\n<li>JRE/JDK 1.6+</li>\n<li>Google App Engine SDK(Java) (<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/intl/en/appengine/downloads.html\">最新版本</a>)</li>\n</ol>\n<li>创建自己的GAE应用<span> </span><a rel=\"nofollow\" target=\"_blank\" href=\"http://appengine.google.com/\">http://appengine.google.com/</a><span> </span>(必须)</li>\n<li>创建自己的Seattle账户以及Vessels<span> </span><a rel=\"nofollow\" target=\"_blank\" href=\"https://seattlegeni.cs.washington.edu/\">Seattle</a>(可选，仅对Programmer推荐使用)</li>\n<li>申请自己的PHP空间（可选）</li>\n<li>部署Remote Server</li>\n<ol>\n<li>部署应用到Google服务器 (必须)</li>\n<ul>\n<li>GUI方式</li>\n<ul>\n<li>appcfgwrapper安装程序已经集成到<tt>hyk-proxy-gae-server-[version].zip</tt>中，执行install.bat/install.sh即可，具体请参考此项目说明<span> </span><a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/appcfgwrapper/\">http://code.google.com/p/appcfgwrapper/</a></li>\n</ul>\n<li>命令行方式</li>\n<ul>\n<li>下载并解压<tt>hyk-proxy-gae-server-[version].zip</tt></li>\n<li>进入解压的目录, 修改war/WEB-INF/appengine-web.xml， 将<tt><application></tt>值改为自己创建的appid</li>\n<li>执行appcfg.cmd/appcfg.sh update war上传, 注意在解压后进入的目录执行(appcfg在’<Google App Engine SDK>/bin’下 )</li>\n</ul>\n</ul>\n<li>部署应用到Seattle平台（可选，仅对Programmer推荐使用）</li>\n<ul>\n<li>Seattle server程序在seattle plugin的deploy目录下，部署运行请参考(<a rel=\"nofollow\" target=\"_blank\" href=\"https://seattlegeni.cs.washington.edu/\">Seattle</a>)</li>\n</ul>\n<li>部署应用到PHP空间（可选）</li>\n<ul>\n<li>上传phptunnel plugin目录下deploy/tunnel.php到服务器上</li>\n</ul>\n</ol>\n</ul>\n<ul>\n<li>运行Local Server</li>\n<ol>\n<li>解压<tt>hyk-proxy-[version].zip</tt><span> </span>或者执行<tt>hyk-proxy-install_[version].exe</tt>(0.9.0后)</li>\n<li>GUI方式</li>\n<ul>\n<li>执行bin/startgui.bat（windows）或者startgui.sh（linux/unix/mac）启动</li>\n</ul>\n<li>命令行方式</li>\n<ul>\n<li>执行bin/start.bat（windows）或者start.sh（linux/unix/mac）启动local server，bin/stop.bat(stop.sh)停止</li>\n</ul>\n<li>浏览器设置代理地址默认为 127.0.0.1:48100，可以修改</li>\n</ol>\n<li>安装plugins</li>\n<ol>\n<li>hyk-proxy中所有proxy功能均是由plugin来完成，包括基于GAE的proxy实现也是一个plugin。默认情况下，GAE的plugin包含在framework的安装包中，不需要单独下载</li>\n<li>plugin安装包一般是zip包，目前均在此项目的site上；安装一般有两种方式:</li>\n<ul>\n<li>GUI方式：在GUI界面上选择Plugins tab然后选择Available tab，点击相应plugin的install button即可</li>\n<li>CLI方式：下载相应zip包，放置到<tt><hyk-proxy>/plugins</tt>下重启即可</li>\n</ul>\n</ol>\n<li>配置</li>\n<ul>\n<li>Framework</li>\n<blockquote>\n<p>Framework的配置仅有两三项，具体涉及proxy的配置均在相应plugin的配置中;目前均在etc/hyk-proxy-conf.xml中（GUI启动则在Config对话框中配置）,简要说明如下：</p>\n</blockquote>\n<ol>\n<li><tt><localserver host=\"localhost\" port=\"48100\" /></tt>, 默认的proxy地址，相应的浏览器的proxy地址应该填&#8221;127.0.0.1:48100&#8243;</li>\n<li><tt><proxyEventServiceFactory>GAE</proxyEventServiceFactory></tt>, 默认选择的proxy实现，若安装了其他的plugin，则可以在此修改为其它的proxy实现</li>\n<blockquote>\n<p><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/maincfg.png\" /></p>\n</blockquote>\n</ol>\n<li>GAE Plugin</li>\n<blockquote>\n<p>基于GAE实现大部分配置均在hyk-proxy-gae-conf.xml中（GUI启动则在GAE plugin的相应Config对话框中配置），简要说明如下：</p>\n</blockquote>\n<ul>\n<li><tt><hyk-proxy-server appid=\"\" /></tt><span> </span>为已部署的ApplicationID， 即<tt><appid>.appspot.com</tt>中<tt><appid></tt>, eg:</li>\n<p><pre><span>                 </span><span><hyk-proxy-server</span><span> </span><span>appid</span><span>=</span><span>\"hyk-proxy-demo\"</span><span> </span><span>/></span><span> </span></pre>\n<blockquote>\n<p>GUI方式下参考下面方式</p>\n<blockquote>\n<p><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/gaecfg1.png\" /><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/gaecfg2.png\" /></p>\n</blockquote>\n</blockquote>\n<li><tt><hyk-proxy-server appid=\"\" /></tt>可配置多个，此情况下， 代理过程中采用轮询策略选择, eg:</li>\n<pre><span>                </span><span><hyk-proxy-server</span><span> </span><span>appid</span><span>=</span><span>\"hyk-proxy-demo\"</span><span> </span><span>/></span><span>                 </span><span><hyk-proxy-server</span><span> </span><span>appid</span><span>=</span><span>\"myappid\"</span><span> </span><span>/></span><span> </span></pre>\n<li><tt><hyk-proxy-server appid=\"\" /></tt><span> </span>中可以配置用户名/密码，具体用户名/密码概念请参考<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/Authorization\">Authorization</a>, eg:</li>\n<pre><span>               </span><span><hyk-proxy-server</span><span> </span><span>appid</span><span>=</span><span>\"hyk-proxy-demo\"</span><span> </span><span>user</span><span>=</span><span>\"root\"</span><span> </span><span>passwd</span><span>=</span><span>\"12345\"</span><span>/></span><span> </span></pre>\n<li>如果不配置appid的话，client会到master node上获取数个共享的appid用于自身启动，注意：</li>\n<ul>\n<li>共享的appid只能用于匿名用户使用（匿名用户的概念看这里<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/Authorization\">Authorization</a>）</li>\n<li>appid所有者可以针对匿名用户设置proxy黑名单，proxy流量控制，所以不配置自己的appid是无法保证应用稳定性</li>\n</ul>\n<li><tt><XMPPAccount user=\"\" passwd=\"\" /></tt>为XMPP账户，是可选配置，在HTTP无法直连情况下可启用，目前可配置GTALK/jabber.org/OVI等几乎所有XMPP帐号（若有不支持的XMPP account，请提交<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/issues/list\">ISSUE</a>）, eg:</li>\n<pre><span>              </span><span><XMPPAccount</span><span> </span><span>user</span><span>=</span><span>\"abc@gmail.com\"</span><span> </span><span>passwd</span><span>=</span><span>\"123456\"</span><span> </span><span>/></span></pre>\n</p>\n</ul>\n<blockquote>\n<p>GUI方式则需要在·Connection Tab下配置</p>\n<blockquote>\n<p><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/xmpp.png\" /></p>\n</blockquote>\n</blockquote>\n<ul>\n<li>XMPP账户可配置多个，此情况下代理过程中采用轮询策略选择,eg:</li>\n<pre><span>             </span><span><XMPPAccount</span><span> </span><span>user</span><span>=</span><span>\"abc@gmail.com\"</span><span> </span><span>passwd</span><span>=</span><span>\"123456\"</span><span> </span><span>/></span><span>             </span><span><XMPPAccount</span><span> </span><span>user</span><span>=</span><span>\"xyz@ovi.com\"</span><span> </span><span>passwd</span><span>=</span><span>\"123456\"</span><span> </span><span>/></span></pre>\n<li>XMPP模式仅在connection mode模式为2（<tt><connectionMode>2</connectionMode></tt>）情况下生效</li>\n<li><tt><maxFetcherNumber>3</maxFetcherNumber></tt><span> </span>在下载文件/观看视频时生效，含义为并发的下载线程数，可以任意调整，建议在1～7之间调整</li>\n</ul>\n<li>Seattle Plugin</li>\n<ol>\n<li>启用Seattle平台作为proxy服务器有两种方式：</li>\n<ul>\n<li>和<tt>AppEngine</tt>平台混合使用(建议)</li>\n<blockquote>\n<p>首先需要安装spac插件，并在etc/hyk-proxy-conf.xml修改启用spac功能：</p>\n<pre><span>               </span><span><proxyEventServiceFactory></span><span>                  SPAC               </span><span></proxyEventServiceFactory></span></pre>\n<p>此外按照<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/SpecialProxyAutoConfig\">SpecialProxyAutoConfig</a>说明，配置何种HTTP请求由Seattle平台处理.</p>\n</blockquote>\n<li>独立使用(不推荐，Seattle平台的资源限制非常严格)</li>\n<blockquote>\n<p>在etc/hyk-proxy-conf.xml启用SeattleGENI：</p>\n<pre><span>             </span><span><proxyEventServiceFactory></span><span>                SeattleGENI             </span><span></proxyEventServiceFactory></span></pre>\n</blockquote>\n</ul>\n<li>配置Setattle平台目的地址</li>\n<ul>\n<li>修改plugin目录下etc/seattle.conf，加入申请得到的ip地址，端口（注意ip是通过seash shell中执行browse得到的ip， 端口是你的seattle account profile中显示的port），eg:</li>\n<pre><span>            </span><span>#128.129.41.211:63160</span><span>            </span><span>150.254</span><span>.</span><span>212.138</span><span>:</span><span>63160</span><span>            </span><span>213.131</span><span>.</span><span>1.121</span><span>:</span><span>63160</span><span>            </span><span>198.175</span><span>.</span><span>122.108</span><span>:</span><span>63160</span></pre>\n</ul>\n</ol>\n<li>PHPTunnel Plugin</li>\n<ol>\n<li>启用PHPTunnel也有两种方式：</li>\n<ul>\n<li>和<tt>AppEngine</tt>平台混合使用(建议)</li>\n<blockquote>\n<p>方法参照Seattle部分</p>\n</blockquote>\n<li>独立使用</li>\n<blockquote>\n<p>在etc/hyk-proxy-conf.xml启用PHPTunnel：</p>\n<pre><span>             </span><span><proxyEventServiceFactory></span><span>                PHPTunnel             </span><span></proxyEventServiceFactory></span></pre>\n</blockquote>\n</ul>\n<li>配置PHP服务端目的地址</li>\n<ul>\n<li>修改plugin目录下etc/phptunnel.conf，最后加入部署得到的php url地址，可配置多个，eg:</li>\n<pre><span>             </span><span>#The Tunnel Server Port</span><span>             </span><span>LocalTunnelPort</span><span>=</span><span>4810</span><span>\n\n             </span><span>#List your PHP page urls below</span><span>             http</span><span>:</span><span>//www.xyz.com/tunnel.php</span></pre>\n</ul>\n<li>PHPTunnel作为https proxy需要满足的条件</li>\n<ul>\n<li>根据目前的技术实现，当选择phptunnel最为https proxy时需要当前网络满足以下任一条件：</li>\n<ul>\n<li>当前机器的IP为公网IP，即是非下面IP范围<tt>10.0.0.0 ~ 10.255.255.255 172.16.0.0 ~ 172.31.255.255 192.168.0.0 ~ 192.168.255.255</tt></li>\n<li>若不满足上面条件，需要机器所直连的路由/NAT设备支持并开启UPNP功能</li>\n</ul>\n</ul>\n</ol>\n<li>SPAC Plugin</li>\n<ol>\n<li>安装后启用SPAC需要修改etc/hyk-proxy-conf.xml启用SPAC：</li>\n<pre><span>             </span><span><proxyEventServiceFactory></span><span>                SPAC             </span><span></proxyEventServiceFactory></span></pre>\n<blockquote>\n<p>GUI中启用SPAC需要指定SPAC为proxy实现，如下</p>\n<blockquote>\n<p><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/spac.png\" /></p>\n</blockquote>\n</blockquote>\n<li>修改proxy选择规则</li>\n<blockquote>\n<p>具体描述参考<span> </span><a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/SpecialProxyAutoConfig\">SpecialProxyAutoConfig</a></p>\n</blockquote>\n</ol>\n</ul>\n</ul>\n<h1><a rel=\"nofollow\" name=\"AppId_&#x005171;&#x004eab;&#x008ba1;&#x005212;\"></a><strong><tt>AppId</tt>共享计划</strong></h1>\n<ul>\n<li>在hyk-proxy的GAE Plugin的GUI(V0.8.5之后)中提供有一个共享appid的功能，任何人可以据此共享自己的appid， 如下图:</li>\n</ul>\n<p> <span> </span><img src=\"http://hyk-proxy.googlecode.com/svn/wiki/images/share.png\" /></p>\n<ul>\n<li>当hyk-proxy的用户由于某些原因（如不知道怎么安装server侧）没有配置自己的appid时，默认情况下，hyk-proxy-client会从服务器上随机获取几个共享appid，然后用匿名用户方式连接<tt><shareappid>.appspot.com</tt></li>\n<li>共享自己appid的贡献者需要据此考虑设置匿名用户的访问策略，在admin工具中提供有blacklist/traffic/stat工具用于监测/控制匿名用户的行为，具体参考<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/Authorization\">Authorization</a></li>\n<li>共享自己appid的贡献者建议在admin工具中执行下面命令设置默认匿名用户策略(root用户登录)：</li>\n<ul>\n<li>stat on — 开启流量统计</li>\n<li>traffic -u anonymouse -s<span> </span><tt>*</tt><span> </span>-r 25000000 — 对匿名用户访问所有站点限制25m流量</li>\n<li>stat reports 5 –查看流量前5的统计报告</li>\n</ul>\n<li>流量统计结果每天定时自动清零，所以若使用共享appid用户当天无法使用，可以过一天再次尝试</li>\n</ul>\n<p><h1><a rel=\"nofollow\" name=\"&#x006ce8;&#x00610f;\"></a><strong>注意</strong></h1>\n<ul>\n<li>启用XMPP模式时，由于xmpp server限制，太频繁发送消息会被server拒绝，可采用配置多个XMPP账户规避</li>\n<li>GUI中有一个Share appid功能， 你可以分享自己的appid到中心服务器，也可以取消分享；中心服务器则随机分派appid给没有安装自己的hyk-proxy-gae-server的用户</li>\n<li>分享自己的appid的用户需要注意配置anonymouse用户的访问策略，以免此appid被滥用， 配置用户策略请参考<a rel=\"nofollow\" target=\"_blank\" href=\"http://code.google.com/p/hyk-proxy/wiki/Authorization\">Authorization</a></li>\n<li>应用Seattle平台相对于<tt>Google AppEngine</tt>平台的优势：由于Seattle平台提供了非常底层的socket操作，因此可以比较完美实现https支持，上传，以及其他局限于<tt>Google AppEngine</tt>的限制无法实现的功能。</li>\n<li>PHPTunnel插件在一定条件下也可以实现完美https的tunnel，但若不满足条件是无法实现https的proxy功能</li>\n</ul>\n<p>  <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/gocomments/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/godelicious/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/gofacebook/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/gotwitter/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/gostumble/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/godigg/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/xijie.wordpress.com/5290/\" /></a> <a rel=\"nofollow\" target=\"_blank\" href=\"http://feeds.wordpress.com/1.0/goreddit/xijie.wordpress.com/5290/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/xijie.wordpress.com/5290/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=xijie.wordpress.com&#038;blog=10068099&#038;post=5290&#038;subd=xijie&#038;ref=&#038;feed=1\" width=\"1\" /></p>\n</p>\n<p><img src=\"http://chinadigitaltimes.net/chinese/files/2011/11/8135d34amaincfg.png-150x150.png\" /></p>\n<p><small>本文由自动聚合程序取自网络，内容和观点不代表数字时代立场</small></p>\n<form method=\"POST\" action=\"http://www.feedblitz.com/f/f.fbz?AddNewUserDirect\">\n定期获得翻墙信息？<a href=\"http://www.feedblitz.com/f/?Sub=750556\">请电邮订阅数字时代</a> <br /><input name=\"EMAIL\" maxlength=\"64\" type=\"text\" size=\"25\" value=\"\"><br />\n<input name=\"FEEDID\" type=\"hidden\" value=\"750556\"><br />\n<input name=\"PUBLISHER\" type=\"hidden\" value=\"7485568\"><br />\n<input type=\"submit\" value=\"订阅!\"><br />\n</form>\n","author":983,"categories":[15300],"tags":[7775,8795]}